Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> instructions_opt
Rule 2     instructions_opt -> instructions
Rule 3     instructions_opt -> <empty>
Rule 4     instructions -> instructions instruction
Rule 5     instructions -> instruction
Rule 6     instruction -> assignment_instruction
Rule 7     instruction -> conditional_instruction
Rule 8     instruction -> compound_instruction
Rule 9     instruction -> print_instruction
Rule 10    instruction -> iteration_instruction
Rule 11    instruction -> jump_instruction
Rule 12    assignment_instruction -> unary_expr = expr ;
Rule 13    assignment_instruction -> unary_expr ADDASSIGN expr ;
Rule 14    assignment_instruction -> unary_expr SUBASSIGN expr ;
Rule 15    assignment_instruction -> unary_expr MULASSIGN expr ;
Rule 16    assignment_instruction -> unary_expr DIVASSIGN expr ;
Rule 17    conditional_instruction -> IF ( expr ) instruction
Rule 18    conditional_instruction -> IF ( expr ) instruction ELSE instruction
Rule 19    compound_instruction -> { }
Rule 20    compound_instruction -> { instructions }
Rule 21    print_instruction -> PRINT expr ;
Rule 22    iteration_instruction -> WHILE ( expr ) instruction
Rule 23    iteration_instruction -> WHILE ( expr ) { instruction
Rule 24    iteration_instruction -> FOR iterator_assignment instruction
Rule 25    jump_instruction -> BREAK ;
Rule 26    jump_instruction -> CONTINUE ;
Rule 27    jump_instruction -> RETURN ;
Rule 28    primary_expr -> ID
Rule 29    primary_expr -> INTNUM
Rule 30    primary_expr -> FLOATNUM
Rule 31    primary_expr -> STRING
Rule 32    primary_expr -> matrix
Rule 33    primary_expr -> ( expr )
Rule 34    postfix_expr -> primary_expr
Rule 35    postfix_expr -> postfix_expr [ expr ]
Rule 36    postfix_expr -> postfix_expr SINGLE_QUOTE
Rule 37    unary_expr -> postfix_expr
Rule 38    unary_expr -> - multiplicative_expr
Rule 39    multiplicative_expr -> unary_expr
Rule 40    multiplicative_expr -> multiplicative_expr * unary_expr
Rule 41    multiplicative_expr -> multiplicative_expr / unary_expr
Rule 42    multiplicative_expr -> multiplicative_expr DOTMUL unary_expr
Rule 43    multiplicative_expr -> multiplicative_expr DOTDIV unary_expr
Rule 44    additive_expr -> multiplicative_expr
Rule 45    additive_expr -> additive_expr + multiplicative_expr
Rule 46    additive_expr -> additive_expr - multiplicative_expr
Rule 47    additive_expr -> additive_expr DOTADD multiplicative_expr
Rule 48    additive_expr -> additive_expr DOTSUB multiplicative_expr
Rule 49    relational_expr -> additive_expr
Rule 50    relational_expr -> relational_expr rel_op additive_expr
Rule 51    equality_expr -> relational_expr
Rule 52    equality_expr -> equality_expr eq_op relational_expr
Rule 53    assignment_expr -> equality_expr
Rule 54    assignment_expr -> unary_expr assignment_op assignment_expr
Rule 55    expr -> assignment_expr
Rule 56    expr -> expr , assignment_expr
Rule 57    expr -> ZEROS ( expr )
Rule 58    expr -> ONES ( expr )
Rule 59    expr -> EYE ( expr )
Rule 60    matrix -> [ outer ]
Rule 61    outer -> outer ; inner
Rule 62    outer -> inner
Rule 63    inner -> inner , elem
Rule 64    inner -> elem
Rule 65    elem -> expr
Rule 66    iterator_assignment -> ID = expr : expr
Rule 67    assignment_op -> =
Rule 68    assignment_op -> ADDASSIGN
Rule 69    assignment_op -> SUBASSIGN
Rule 70    assignment_op -> MULASSIGN
Rule 71    assignment_op -> DIVASSIGN
Rule 72    rel_op -> LT
Rule 73    rel_op -> LE
Rule 74    rel_op -> GT
Rule 75    rel_op -> GE
Rule 76    eq_op -> EQ
Rule 77    eq_op -> NE

Terminals, with rules where they appear

(                    : 17 18 22 23 33 57 58 59
)                    : 17 18 22 23 33 57 58 59
*                    : 40
+                    : 45
,                    : 56 63
-                    : 38 46
/                    : 41
:                    : 66
;                    : 12 13 14 15 16 21 25 26 27 61
=                    : 12 66 67
ADDASSIGN            : 13 68
BREAK                : 25
CONTINUE             : 26
DIVASSIGN            : 16 71
DOTADD               : 47
DOTDIV               : 43
DOTMUL               : 42
DOTSUB               : 48
ELSE                 : 18
EQ                   : 76
EYE                  : 59
FLOATNUM             : 30
FOR                  : 24
GE                   : 75
GT                   : 74
ID                   : 28 66
IF                   : 17 18
INTNUM               : 29
LE                   : 73
LT                   : 72
MULASSIGN            : 15 70
NE                   : 77
ONES                 : 58
PRINT                : 21
RETURN               : 27
SINGLE_QUOTE         : 36
STRING               : 31
SUBASSIGN            : 14 69
WHILE                : 22 23
ZEROS                : 57
[                    : 35 60
]                    : 35 60
error                : 
{                    : 19 20 23
}                    : 19 20

Nonterminals, with rules where they appear

additive_expr        : 45 46 47 48 49 50
assignment_expr      : 54 55 56
assignment_instruction : 6
assignment_op        : 54
compound_instruction : 8
conditional_instruction : 7
elem                 : 63 64
eq_op                : 52
equality_expr        : 52 53
expr                 : 12 13 14 15 16 17 18 21 22 23 33 35 56 57 58 59 65 66 66
inner                : 61 62 63
instruction          : 4 5 17 18 18 22 23 24
instructions         : 2 4 20
instructions_opt     : 1
iteration_instruction : 10
iterator_assignment  : 24
jump_instruction     : 11
matrix               : 32
multiplicative_expr  : 38 40 41 42 43 44 45 46 47 48
outer                : 60 61
postfix_expr         : 35 36 37
primary_expr         : 34
print_instruction    : 9
program              : 0
rel_op               : 50
relational_expr      : 50 51 52
unary_expr           : 12 13 14 15 16 39 40 41 42 43 54

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . instructions_opt
    (2) instructions_opt -> . instructions
    (3) instructions_opt -> .
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instruction -> . assignment_instruction
    (7) instruction -> . conditional_instruction
    (8) instruction -> . compound_instruction
    (9) instruction -> . print_instruction
    (10) instruction -> . iteration_instruction
    (11) instruction -> . jump_instruction
    (12) assignment_instruction -> . unary_expr = expr ;
    (13) assignment_instruction -> . unary_expr ADDASSIGN expr ;
    (14) assignment_instruction -> . unary_expr SUBASSIGN expr ;
    (15) assignment_instruction -> . unary_expr MULASSIGN expr ;
    (16) assignment_instruction -> . unary_expr DIVASSIGN expr ;
    (17) conditional_instruction -> . IF ( expr ) instruction
    (18) conditional_instruction -> . IF ( expr ) instruction ELSE instruction
    (19) compound_instruction -> . { }
    (20) compound_instruction -> . { instructions }
    (21) print_instruction -> . PRINT expr ;
    (22) iteration_instruction -> . WHILE ( expr ) instruction
    (23) iteration_instruction -> . WHILE ( expr ) { instruction
    (24) iteration_instruction -> . FOR iterator_assignment instruction
    (25) jump_instruction -> . BREAK ;
    (26) jump_instruction -> . CONTINUE ;
    (27) jump_instruction -> . RETURN ;
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (60) matrix -> . [ outer ]

    $end            reduce using rule 3 (instructions_opt -> .)
    IF              shift and go to state 23
    {               shift and go to state 29
    PRINT           shift and go to state 6
    WHILE           shift and go to state 5
    FOR             shift and go to state 19
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    RETURN          shift and go to state 1
    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    iteration_instruction          shift and go to state 18
    unary_expr                     shift and go to state 2
    compound_instruction           shift and go to state 24
    instruction                    shift and go to state 25
    assignment_instruction         shift and go to state 3
    postfix_expr                   shift and go to state 12
    instructions_opt               shift and go to state 20
    program                        shift and go to state 15
    primary_expr                   shift and go to state 9
    jump_instruction               shift and go to state 16
    print_instruction              shift and go to state 28
    conditional_instruction        shift and go to state 7
    matrix                         shift and go to state 11
    instructions                   shift and go to state 17

state 1

    (27) jump_instruction -> RETURN . ;

    ;               shift and go to state 30


state 2

    (12) assignment_instruction -> unary_expr . = expr ;
    (13) assignment_instruction -> unary_expr . ADDASSIGN expr ;
    (14) assignment_instruction -> unary_expr . SUBASSIGN expr ;
    (15) assignment_instruction -> unary_expr . MULASSIGN expr ;
    (16) assignment_instruction -> unary_expr . DIVASSIGN expr ;

    =               shift and go to state 35
    ADDASSIGN       shift and go to state 34
    SUBASSIGN       shift and go to state 31
    MULASSIGN       shift and go to state 33
    DIVASSIGN       shift and go to state 32


state 3

    (6) instruction -> assignment_instruction .

    }               reduce using rule 6 (instruction -> assignment_instruction .)
    IF              reduce using rule 6 (instruction -> assignment_instruction .)
    {               reduce using rule 6 (instruction -> assignment_instruction .)
    PRINT           reduce using rule 6 (instruction -> assignment_instruction .)
    WHILE           reduce using rule 6 (instruction -> assignment_instruction .)
    FOR             reduce using rule 6 (instruction -> assignment_instruction .)
    BREAK           reduce using rule 6 (instruction -> assignment_instruction .)
    CONTINUE        reduce using rule 6 (instruction -> assignment_instruction .)
    RETURN          reduce using rule 6 (instruction -> assignment_instruction .)
    -               reduce using rule 6 (instruction -> assignment_instruction .)
    ID              reduce using rule 6 (instruction -> assignment_instruction .)
    INTNUM          reduce using rule 6 (instruction -> assignment_instruction .)
    FLOATNUM        reduce using rule 6 (instruction -> assignment_instruction .)
    STRING          reduce using rule 6 (instruction -> assignment_instruction .)
    (               reduce using rule 6 (instruction -> assignment_instruction .)
    [               reduce using rule 6 (instruction -> assignment_instruction .)
    $end            reduce using rule 6 (instruction -> assignment_instruction .)
    ELSE            reduce using rule 6 (instruction -> assignment_instruction .)


state 4

    (30) primary_expr -> FLOATNUM .

    [               reduce using rule 30 (primary_expr -> FLOATNUM .)
    SINGLE_QUOTE    reduce using rule 30 (primary_expr -> FLOATNUM .)
    =               reduce using rule 30 (primary_expr -> FLOATNUM .)
    ADDASSIGN       reduce using rule 30 (primary_expr -> FLOATNUM .)
    SUBASSIGN       reduce using rule 30 (primary_expr -> FLOATNUM .)
    MULASSIGN       reduce using rule 30 (primary_expr -> FLOATNUM .)
    DIVASSIGN       reduce using rule 30 (primary_expr -> FLOATNUM .)
    *               reduce using rule 30 (primary_expr -> FLOATNUM .)
    /               reduce using rule 30 (primary_expr -> FLOATNUM .)
    DOTMUL          reduce using rule 30 (primary_expr -> FLOATNUM .)
    DOTDIV          reduce using rule 30 (primary_expr -> FLOATNUM .)
    +               reduce using rule 30 (primary_expr -> FLOATNUM .)
    -               reduce using rule 30 (primary_expr -> FLOATNUM .)
    DOTADD          reduce using rule 30 (primary_expr -> FLOATNUM .)
    DOTSUB          reduce using rule 30 (primary_expr -> FLOATNUM .)
    LT              reduce using rule 30 (primary_expr -> FLOATNUM .)
    LE              reduce using rule 30 (primary_expr -> FLOATNUM .)
    GT              reduce using rule 30 (primary_expr -> FLOATNUM .)
    GE              reduce using rule 30 (primary_expr -> FLOATNUM .)
    EQ              reduce using rule 30 (primary_expr -> FLOATNUM .)
    NE              reduce using rule 30 (primary_expr -> FLOATNUM .)
    ;               reduce using rule 30 (primary_expr -> FLOATNUM .)
    ,               reduce using rule 30 (primary_expr -> FLOATNUM .)
    )               reduce using rule 30 (primary_expr -> FLOATNUM .)
    ]               reduce using rule 30 (primary_expr -> FLOATNUM .)
    :               reduce using rule 30 (primary_expr -> FLOATNUM .)
    IF              reduce using rule 30 (primary_expr -> FLOATNUM .)
    {               reduce using rule 30 (primary_expr -> FLOATNUM .)
    PRINT           reduce using rule 30 (primary_expr -> FLOATNUM .)
    WHILE           reduce using rule 30 (primary_expr -> FLOATNUM .)
    FOR             reduce using rule 30 (primary_expr -> FLOATNUM .)
    BREAK           reduce using rule 30 (primary_expr -> FLOATNUM .)
    CONTINUE        reduce using rule 30 (primary_expr -> FLOATNUM .)
    RETURN          reduce using rule 30 (primary_expr -> FLOATNUM .)
    ID              reduce using rule 30 (primary_expr -> FLOATNUM .)
    INTNUM          reduce using rule 30 (primary_expr -> FLOATNUM .)
    FLOATNUM        reduce using rule 30 (primary_expr -> FLOATNUM .)
    STRING          reduce using rule 30 (primary_expr -> FLOATNUM .)
    (               reduce using rule 30 (primary_expr -> FLOATNUM .)


state 5

    (22) iteration_instruction -> WHILE . ( expr ) instruction
    (23) iteration_instruction -> WHILE . ( expr ) { instruction

    (               shift and go to state 36


state 6

    (21) print_instruction -> PRINT . expr ;
    (55) expr -> . assignment_expr
    (56) expr -> . expr , assignment_expr
    (57) expr -> . ZEROS ( expr )
    (58) expr -> . ONES ( expr )
    (59) expr -> . EYE ( expr )
    (53) assignment_expr -> . equality_expr
    (54) assignment_expr -> . unary_expr assignment_op assignment_expr
    (51) equality_expr -> . relational_expr
    (52) equality_expr -> . equality_expr eq_op relational_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (49) relational_expr -> . additive_expr
    (50) relational_expr -> . relational_expr rel_op additive_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (44) additive_expr -> . multiplicative_expr
    (45) additive_expr -> . additive_expr + multiplicative_expr
    (46) additive_expr -> . additive_expr - multiplicative_expr
    (47) additive_expr -> . additive_expr DOTADD multiplicative_expr
    (48) additive_expr -> . additive_expr DOTSUB multiplicative_expr
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (39) multiplicative_expr -> . unary_expr
    (40) multiplicative_expr -> . multiplicative_expr * unary_expr
    (41) multiplicative_expr -> . multiplicative_expr / unary_expr
    (42) multiplicative_expr -> . multiplicative_expr DOTMUL unary_expr
    (43) multiplicative_expr -> . multiplicative_expr DOTDIV unary_expr
    (60) matrix -> . [ outer ]

    ZEROS           shift and go to state 43
    ONES            shift and go to state 42
    EYE             shift and go to state 40
    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    additive_expr                  shift and go to state 45
    matrix                         shift and go to state 11
    unary_expr                     shift and go to state 37
    relational_expr                shift and go to state 41
    expr                           shift and go to state 44
    equality_expr                  shift and go to state 38
    postfix_expr                   shift and go to state 12
    multiplicative_expr            shift and go to state 39
    primary_expr                   shift and go to state 9
    assignment_expr                shift and go to state 46

state 7

    (7) instruction -> conditional_instruction .

    }               reduce using rule 7 (instruction -> conditional_instruction .)
    IF              reduce using rule 7 (instruction -> conditional_instruction .)
    {               reduce using rule 7 (instruction -> conditional_instruction .)
    PRINT           reduce using rule 7 (instruction -> conditional_instruction .)
    WHILE           reduce using rule 7 (instruction -> conditional_instruction .)
    FOR             reduce using rule 7 (instruction -> conditional_instruction .)
    BREAK           reduce using rule 7 (instruction -> conditional_instruction .)
    CONTINUE        reduce using rule 7 (instruction -> conditional_instruction .)
    RETURN          reduce using rule 7 (instruction -> conditional_instruction .)
    -               reduce using rule 7 (instruction -> conditional_instruction .)
    ID              reduce using rule 7 (instruction -> conditional_instruction .)
    INTNUM          reduce using rule 7 (instruction -> conditional_instruction .)
    FLOATNUM        reduce using rule 7 (instruction -> conditional_instruction .)
    STRING          reduce using rule 7 (instruction -> conditional_instruction .)
    (               reduce using rule 7 (instruction -> conditional_instruction .)
    [               reduce using rule 7 (instruction -> conditional_instruction .)
    $end            reduce using rule 7 (instruction -> conditional_instruction .)
    ELSE            reduce using rule 7 (instruction -> conditional_instruction .)


state 8

    (31) primary_expr -> STRING .

    [               reduce using rule 31 (primary_expr -> STRING .)
    SINGLE_QUOTE    reduce using rule 31 (primary_expr -> STRING .)
    =               reduce using rule 31 (primary_expr -> STRING .)
    ADDASSIGN       reduce using rule 31 (primary_expr -> STRING .)
    SUBASSIGN       reduce using rule 31 (primary_expr -> STRING .)
    MULASSIGN       reduce using rule 31 (primary_expr -> STRING .)
    DIVASSIGN       reduce using rule 31 (primary_expr -> STRING .)
    *               reduce using rule 31 (primary_expr -> STRING .)
    /               reduce using rule 31 (primary_expr -> STRING .)
    DOTMUL          reduce using rule 31 (primary_expr -> STRING .)
    DOTDIV          reduce using rule 31 (primary_expr -> STRING .)
    +               reduce using rule 31 (primary_expr -> STRING .)
    -               reduce using rule 31 (primary_expr -> STRING .)
    DOTADD          reduce using rule 31 (primary_expr -> STRING .)
    DOTSUB          reduce using rule 31 (primary_expr -> STRING .)
    LT              reduce using rule 31 (primary_expr -> STRING .)
    LE              reduce using rule 31 (primary_expr -> STRING .)
    GT              reduce using rule 31 (primary_expr -> STRING .)
    GE              reduce using rule 31 (primary_expr -> STRING .)
    EQ              reduce using rule 31 (primary_expr -> STRING .)
    NE              reduce using rule 31 (primary_expr -> STRING .)
    ;               reduce using rule 31 (primary_expr -> STRING .)
    ,               reduce using rule 31 (primary_expr -> STRING .)
    )               reduce using rule 31 (primary_expr -> STRING .)
    ]               reduce using rule 31 (primary_expr -> STRING .)
    :               reduce using rule 31 (primary_expr -> STRING .)
    IF              reduce using rule 31 (primary_expr -> STRING .)
    {               reduce using rule 31 (primary_expr -> STRING .)
    PRINT           reduce using rule 31 (primary_expr -> STRING .)
    WHILE           reduce using rule 31 (primary_expr -> STRING .)
    FOR             reduce using rule 31 (primary_expr -> STRING .)
    BREAK           reduce using rule 31 (primary_expr -> STRING .)
    CONTINUE        reduce using rule 31 (primary_expr -> STRING .)
    RETURN          reduce using rule 31 (primary_expr -> STRING .)
    ID              reduce using rule 31 (primary_expr -> STRING .)
    INTNUM          reduce using rule 31 (primary_expr -> STRING .)
    FLOATNUM        reduce using rule 31 (primary_expr -> STRING .)
    STRING          reduce using rule 31 (primary_expr -> STRING .)
    (               reduce using rule 31 (primary_expr -> STRING .)


state 9

    (34) postfix_expr -> primary_expr .

    [               reduce using rule 34 (postfix_expr -> primary_expr .)
    SINGLE_QUOTE    reduce using rule 34 (postfix_expr -> primary_expr .)
    *               reduce using rule 34 (postfix_expr -> primary_expr .)
    /               reduce using rule 34 (postfix_expr -> primary_expr .)
    DOTMUL          reduce using rule 34 (postfix_expr -> primary_expr .)
    DOTDIV          reduce using rule 34 (postfix_expr -> primary_expr .)
    +               reduce using rule 34 (postfix_expr -> primary_expr .)
    -               reduce using rule 34 (postfix_expr -> primary_expr .)
    DOTADD          reduce using rule 34 (postfix_expr -> primary_expr .)
    DOTSUB          reduce using rule 34 (postfix_expr -> primary_expr .)
    LT              reduce using rule 34 (postfix_expr -> primary_expr .)
    LE              reduce using rule 34 (postfix_expr -> primary_expr .)
    GT              reduce using rule 34 (postfix_expr -> primary_expr .)
    GE              reduce using rule 34 (postfix_expr -> primary_expr .)
    EQ              reduce using rule 34 (postfix_expr -> primary_expr .)
    NE              reduce using rule 34 (postfix_expr -> primary_expr .)
    ;               reduce using rule 34 (postfix_expr -> primary_expr .)
    ,               reduce using rule 34 (postfix_expr -> primary_expr .)
    )               reduce using rule 34 (postfix_expr -> primary_expr .)
    ]               reduce using rule 34 (postfix_expr -> primary_expr .)
    :               reduce using rule 34 (postfix_expr -> primary_expr .)
    IF              reduce using rule 34 (postfix_expr -> primary_expr .)
    {               reduce using rule 34 (postfix_expr -> primary_expr .)
    PRINT           reduce using rule 34 (postfix_expr -> primary_expr .)
    WHILE           reduce using rule 34 (postfix_expr -> primary_expr .)
    FOR             reduce using rule 34 (postfix_expr -> primary_expr .)
    BREAK           reduce using rule 34 (postfix_expr -> primary_expr .)
    CONTINUE        reduce using rule 34 (postfix_expr -> primary_expr .)
    RETURN          reduce using rule 34 (postfix_expr -> primary_expr .)
    ID              reduce using rule 34 (postfix_expr -> primary_expr .)
    INTNUM          reduce using rule 34 (postfix_expr -> primary_expr .)
    FLOATNUM        reduce using rule 34 (postfix_expr -> primary_expr .)
    STRING          reduce using rule 34 (postfix_expr -> primary_expr .)
    (               reduce using rule 34 (postfix_expr -> primary_expr .)
    =               reduce using rule 34 (postfix_expr -> primary_expr .)
    ADDASSIGN       reduce using rule 34 (postfix_expr -> primary_expr .)
    SUBASSIGN       reduce using rule 34 (postfix_expr -> primary_expr .)
    MULASSIGN       reduce using rule 34 (postfix_expr -> primary_expr .)
    DIVASSIGN       reduce using rule 34 (postfix_expr -> primary_expr .)


state 10

    (29) primary_expr -> INTNUM .

    [               reduce using rule 29 (primary_expr -> INTNUM .)
    SINGLE_QUOTE    reduce using rule 29 (primary_expr -> INTNUM .)
    =               reduce using rule 29 (primary_expr -> INTNUM .)
    ADDASSIGN       reduce using rule 29 (primary_expr -> INTNUM .)
    SUBASSIGN       reduce using rule 29 (primary_expr -> INTNUM .)
    MULASSIGN       reduce using rule 29 (primary_expr -> INTNUM .)
    DIVASSIGN       reduce using rule 29 (primary_expr -> INTNUM .)
    *               reduce using rule 29 (primary_expr -> INTNUM .)
    /               reduce using rule 29 (primary_expr -> INTNUM .)
    DOTMUL          reduce using rule 29 (primary_expr -> INTNUM .)
    DOTDIV          reduce using rule 29 (primary_expr -> INTNUM .)
    +               reduce using rule 29 (primary_expr -> INTNUM .)
    -               reduce using rule 29 (primary_expr -> INTNUM .)
    DOTADD          reduce using rule 29 (primary_expr -> INTNUM .)
    DOTSUB          reduce using rule 29 (primary_expr -> INTNUM .)
    LT              reduce using rule 29 (primary_expr -> INTNUM .)
    LE              reduce using rule 29 (primary_expr -> INTNUM .)
    GT              reduce using rule 29 (primary_expr -> INTNUM .)
    GE              reduce using rule 29 (primary_expr -> INTNUM .)
    EQ              reduce using rule 29 (primary_expr -> INTNUM .)
    NE              reduce using rule 29 (primary_expr -> INTNUM .)
    ;               reduce using rule 29 (primary_expr -> INTNUM .)
    ,               reduce using rule 29 (primary_expr -> INTNUM .)
    )               reduce using rule 29 (primary_expr -> INTNUM .)
    ]               reduce using rule 29 (primary_expr -> INTNUM .)
    :               reduce using rule 29 (primary_expr -> INTNUM .)
    IF              reduce using rule 29 (primary_expr -> INTNUM .)
    {               reduce using rule 29 (primary_expr -> INTNUM .)
    PRINT           reduce using rule 29 (primary_expr -> INTNUM .)
    WHILE           reduce using rule 29 (primary_expr -> INTNUM .)
    FOR             reduce using rule 29 (primary_expr -> INTNUM .)
    BREAK           reduce using rule 29 (primary_expr -> INTNUM .)
    CONTINUE        reduce using rule 29 (primary_expr -> INTNUM .)
    RETURN          reduce using rule 29 (primary_expr -> INTNUM .)
    ID              reduce using rule 29 (primary_expr -> INTNUM .)
    INTNUM          reduce using rule 29 (primary_expr -> INTNUM .)
    FLOATNUM        reduce using rule 29 (primary_expr -> INTNUM .)
    STRING          reduce using rule 29 (primary_expr -> INTNUM .)
    (               reduce using rule 29 (primary_expr -> INTNUM .)


state 11

    (32) primary_expr -> matrix .

    [               reduce using rule 32 (primary_expr -> matrix .)
    SINGLE_QUOTE    reduce using rule 32 (primary_expr -> matrix .)
    =               reduce using rule 32 (primary_expr -> matrix .)
    ADDASSIGN       reduce using rule 32 (primary_expr -> matrix .)
    SUBASSIGN       reduce using rule 32 (primary_expr -> matrix .)
    MULASSIGN       reduce using rule 32 (primary_expr -> matrix .)
    DIVASSIGN       reduce using rule 32 (primary_expr -> matrix .)
    *               reduce using rule 32 (primary_expr -> matrix .)
    /               reduce using rule 32 (primary_expr -> matrix .)
    DOTMUL          reduce using rule 32 (primary_expr -> matrix .)
    DOTDIV          reduce using rule 32 (primary_expr -> matrix .)
    +               reduce using rule 32 (primary_expr -> matrix .)
    -               reduce using rule 32 (primary_expr -> matrix .)
    DOTADD          reduce using rule 32 (primary_expr -> matrix .)
    DOTSUB          reduce using rule 32 (primary_expr -> matrix .)
    LT              reduce using rule 32 (primary_expr -> matrix .)
    LE              reduce using rule 32 (primary_expr -> matrix .)
    GT              reduce using rule 32 (primary_expr -> matrix .)
    GE              reduce using rule 32 (primary_expr -> matrix .)
    EQ              reduce using rule 32 (primary_expr -> matrix .)
    NE              reduce using rule 32 (primary_expr -> matrix .)
    ;               reduce using rule 32 (primary_expr -> matrix .)
    ,               reduce using rule 32 (primary_expr -> matrix .)
    )               reduce using rule 32 (primary_expr -> matrix .)
    ]               reduce using rule 32 (primary_expr -> matrix .)
    :               reduce using rule 32 (primary_expr -> matrix .)
    IF              reduce using rule 32 (primary_expr -> matrix .)
    {               reduce using rule 32 (primary_expr -> matrix .)
    PRINT           reduce using rule 32 (primary_expr -> matrix .)
    WHILE           reduce using rule 32 (primary_expr -> matrix .)
    FOR             reduce using rule 32 (primary_expr -> matrix .)
    BREAK           reduce using rule 32 (primary_expr -> matrix .)
    CONTINUE        reduce using rule 32 (primary_expr -> matrix .)
    RETURN          reduce using rule 32 (primary_expr -> matrix .)
    ID              reduce using rule 32 (primary_expr -> matrix .)
    INTNUM          reduce using rule 32 (primary_expr -> matrix .)
    FLOATNUM        reduce using rule 32 (primary_expr -> matrix .)
    STRING          reduce using rule 32 (primary_expr -> matrix .)
    (               reduce using rule 32 (primary_expr -> matrix .)


state 12

    (37) unary_expr -> postfix_expr .
    (35) postfix_expr -> postfix_expr . [ expr ]
    (36) postfix_expr -> postfix_expr . SINGLE_QUOTE

  ! shift/reduce conflict for [ resolved as shift
    =               reduce using rule 37 (unary_expr -> postfix_expr .)
    ADDASSIGN       reduce using rule 37 (unary_expr -> postfix_expr .)
    SUBASSIGN       reduce using rule 37 (unary_expr -> postfix_expr .)
    MULASSIGN       reduce using rule 37 (unary_expr -> postfix_expr .)
    DIVASSIGN       reduce using rule 37 (unary_expr -> postfix_expr .)
    *               reduce using rule 37 (unary_expr -> postfix_expr .)
    /               reduce using rule 37 (unary_expr -> postfix_expr .)
    DOTMUL          reduce using rule 37 (unary_expr -> postfix_expr .)
    DOTDIV          reduce using rule 37 (unary_expr -> postfix_expr .)
    +               reduce using rule 37 (unary_expr -> postfix_expr .)
    -               reduce using rule 37 (unary_expr -> postfix_expr .)
    DOTADD          reduce using rule 37 (unary_expr -> postfix_expr .)
    DOTSUB          reduce using rule 37 (unary_expr -> postfix_expr .)
    LT              reduce using rule 37 (unary_expr -> postfix_expr .)
    LE              reduce using rule 37 (unary_expr -> postfix_expr .)
    GT              reduce using rule 37 (unary_expr -> postfix_expr .)
    GE              reduce using rule 37 (unary_expr -> postfix_expr .)
    EQ              reduce using rule 37 (unary_expr -> postfix_expr .)
    NE              reduce using rule 37 (unary_expr -> postfix_expr .)
    ;               reduce using rule 37 (unary_expr -> postfix_expr .)
    ,               reduce using rule 37 (unary_expr -> postfix_expr .)
    )               reduce using rule 37 (unary_expr -> postfix_expr .)
    ]               reduce using rule 37 (unary_expr -> postfix_expr .)
    :               reduce using rule 37 (unary_expr -> postfix_expr .)
    IF              reduce using rule 37 (unary_expr -> postfix_expr .)
    {               reduce using rule 37 (unary_expr -> postfix_expr .)
    PRINT           reduce using rule 37 (unary_expr -> postfix_expr .)
    WHILE           reduce using rule 37 (unary_expr -> postfix_expr .)
    FOR             reduce using rule 37 (unary_expr -> postfix_expr .)
    BREAK           reduce using rule 37 (unary_expr -> postfix_expr .)
    CONTINUE        reduce using rule 37 (unary_expr -> postfix_expr .)
    RETURN          reduce using rule 37 (unary_expr -> postfix_expr .)
    ID              reduce using rule 37 (unary_expr -> postfix_expr .)
    INTNUM          reduce using rule 37 (unary_expr -> postfix_expr .)
    FLOATNUM        reduce using rule 37 (unary_expr -> postfix_expr .)
    STRING          reduce using rule 37 (unary_expr -> postfix_expr .)
    (               reduce using rule 37 (unary_expr -> postfix_expr .)
    [               shift and go to state 47
    SINGLE_QUOTE    shift and go to state 48

  ! [               [ reduce using rule 37 (unary_expr -> postfix_expr .) ]


state 13

    (33) primary_expr -> ( . expr )
    (55) expr -> . assignment_expr
    (56) expr -> . expr , assignment_expr
    (57) expr -> . ZEROS ( expr )
    (58) expr -> . ONES ( expr )
    (59) expr -> . EYE ( expr )
    (53) assignment_expr -> . equality_expr
    (54) assignment_expr -> . unary_expr assignment_op assignment_expr
    (51) equality_expr -> . relational_expr
    (52) equality_expr -> . equality_expr eq_op relational_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (49) relational_expr -> . additive_expr
    (50) relational_expr -> . relational_expr rel_op additive_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (44) additive_expr -> . multiplicative_expr
    (45) additive_expr -> . additive_expr + multiplicative_expr
    (46) additive_expr -> . additive_expr - multiplicative_expr
    (47) additive_expr -> . additive_expr DOTADD multiplicative_expr
    (48) additive_expr -> . additive_expr DOTSUB multiplicative_expr
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (39) multiplicative_expr -> . unary_expr
    (40) multiplicative_expr -> . multiplicative_expr * unary_expr
    (41) multiplicative_expr -> . multiplicative_expr / unary_expr
    (42) multiplicative_expr -> . multiplicative_expr DOTMUL unary_expr
    (43) multiplicative_expr -> . multiplicative_expr DOTDIV unary_expr
    (60) matrix -> . [ outer ]

    ZEROS           shift and go to state 43
    ONES            shift and go to state 42
    EYE             shift and go to state 40
    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    additive_expr                  shift and go to state 45
    matrix                         shift and go to state 11
    unary_expr                     shift and go to state 37
    relational_expr                shift and go to state 41
    expr                           shift and go to state 49
    equality_expr                  shift and go to state 38
    postfix_expr                   shift and go to state 12
    multiplicative_expr            shift and go to state 39
    primary_expr                   shift and go to state 9
    assignment_expr                shift and go to state 46

state 14

    (38) unary_expr -> - . multiplicative_expr
    (39) multiplicative_expr -> . unary_expr
    (40) multiplicative_expr -> . multiplicative_expr * unary_expr
    (41) multiplicative_expr -> . multiplicative_expr / unary_expr
    (42) multiplicative_expr -> . multiplicative_expr DOTMUL unary_expr
    (43) multiplicative_expr -> . multiplicative_expr DOTDIV unary_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (60) matrix -> . [ outer ]

    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    matrix                         shift and go to state 11
    postfix_expr                   shift and go to state 12
    unary_expr                     shift and go to state 50
    multiplicative_expr            shift and go to state 51
    primary_expr                   shift and go to state 9

state 15

    (0) S' -> program .



state 16

    (11) instruction -> jump_instruction .

    }               reduce using rule 11 (instruction -> jump_instruction .)
    IF              reduce using rule 11 (instruction -> jump_instruction .)
    {               reduce using rule 11 (instruction -> jump_instruction .)
    PRINT           reduce using rule 11 (instruction -> jump_instruction .)
    WHILE           reduce using rule 11 (instruction -> jump_instruction .)
    FOR             reduce using rule 11 (instruction -> jump_instruction .)
    BREAK           reduce using rule 11 (instruction -> jump_instruction .)
    CONTINUE        reduce using rule 11 (instruction -> jump_instruction .)
    RETURN          reduce using rule 11 (instruction -> jump_instruction .)
    -               reduce using rule 11 (instruction -> jump_instruction .)
    ID              reduce using rule 11 (instruction -> jump_instruction .)
    INTNUM          reduce using rule 11 (instruction -> jump_instruction .)
    FLOATNUM        reduce using rule 11 (instruction -> jump_instruction .)
    STRING          reduce using rule 11 (instruction -> jump_instruction .)
    (               reduce using rule 11 (instruction -> jump_instruction .)
    [               reduce using rule 11 (instruction -> jump_instruction .)
    $end            reduce using rule 11 (instruction -> jump_instruction .)
    ELSE            reduce using rule 11 (instruction -> jump_instruction .)


state 17

    (2) instructions_opt -> instructions .
    (4) instructions -> instructions . instruction
    (6) instruction -> . assignment_instruction
    (7) instruction -> . conditional_instruction
    (8) instruction -> . compound_instruction
    (9) instruction -> . print_instruction
    (10) instruction -> . iteration_instruction
    (11) instruction -> . jump_instruction
    (12) assignment_instruction -> . unary_expr = expr ;
    (13) assignment_instruction -> . unary_expr ADDASSIGN expr ;
    (14) assignment_instruction -> . unary_expr SUBASSIGN expr ;
    (15) assignment_instruction -> . unary_expr MULASSIGN expr ;
    (16) assignment_instruction -> . unary_expr DIVASSIGN expr ;
    (17) conditional_instruction -> . IF ( expr ) instruction
    (18) conditional_instruction -> . IF ( expr ) instruction ELSE instruction
    (19) compound_instruction -> . { }
    (20) compound_instruction -> . { instructions }
    (21) print_instruction -> . PRINT expr ;
    (22) iteration_instruction -> . WHILE ( expr ) instruction
    (23) iteration_instruction -> . WHILE ( expr ) { instruction
    (24) iteration_instruction -> . FOR iterator_assignment instruction
    (25) jump_instruction -> . BREAK ;
    (26) jump_instruction -> . CONTINUE ;
    (27) jump_instruction -> . RETURN ;
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (60) matrix -> . [ outer ]

    $end            reduce using rule 2 (instructions_opt -> instructions .)
    IF              shift and go to state 23
    {               shift and go to state 29
    PRINT           shift and go to state 6
    WHILE           shift and go to state 5
    FOR             shift and go to state 19
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    RETURN          shift and go to state 1
    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    iteration_instruction          shift and go to state 18
    unary_expr                     shift and go to state 2
    compound_instruction           shift and go to state 24
    instruction                    shift and go to state 52
    assignment_instruction         shift and go to state 3
    postfix_expr                   shift and go to state 12
    primary_expr                   shift and go to state 9
    jump_instruction               shift and go to state 16
    print_instruction              shift and go to state 28
    conditional_instruction        shift and go to state 7
    matrix                         shift and go to state 11

state 18

    (10) instruction -> iteration_instruction .

    }               reduce using rule 10 (instruction -> iteration_instruction .)
    IF              reduce using rule 10 (instruction -> iteration_instruction .)
    {               reduce using rule 10 (instruction -> iteration_instruction .)
    PRINT           reduce using rule 10 (instruction -> iteration_instruction .)
    WHILE           reduce using rule 10 (instruction -> iteration_instruction .)
    FOR             reduce using rule 10 (instruction -> iteration_instruction .)
    BREAK           reduce using rule 10 (instruction -> iteration_instruction .)
    CONTINUE        reduce using rule 10 (instruction -> iteration_instruction .)
    RETURN          reduce using rule 10 (instruction -> iteration_instruction .)
    -               reduce using rule 10 (instruction -> iteration_instruction .)
    ID              reduce using rule 10 (instruction -> iteration_instruction .)
    INTNUM          reduce using rule 10 (instruction -> iteration_instruction .)
    FLOATNUM        reduce using rule 10 (instruction -> iteration_instruction .)
    STRING          reduce using rule 10 (instruction -> iteration_instruction .)
    (               reduce using rule 10 (instruction -> iteration_instruction .)
    [               reduce using rule 10 (instruction -> iteration_instruction .)
    $end            reduce using rule 10 (instruction -> iteration_instruction .)
    ELSE            reduce using rule 10 (instruction -> iteration_instruction .)


state 19

    (24) iteration_instruction -> FOR . iterator_assignment instruction
    (66) iterator_assignment -> . ID = expr : expr

    ID              shift and go to state 54

    iterator_assignment            shift and go to state 53

state 20

    (1) program -> instructions_opt .

    $end            reduce using rule 1 (program -> instructions_opt .)


state 21

    (60) matrix -> [ . outer ]
    (61) outer -> . outer ; inner
    (62) outer -> . inner
    (63) inner -> . inner , elem
    (64) inner -> . elem
    (65) elem -> . expr
    (55) expr -> . assignment_expr
    (56) expr -> . expr , assignment_expr
    (57) expr -> . ZEROS ( expr )
    (58) expr -> . ONES ( expr )
    (59) expr -> . EYE ( expr )
    (53) assignment_expr -> . equality_expr
    (54) assignment_expr -> . unary_expr assignment_op assignment_expr
    (51) equality_expr -> . relational_expr
    (52) equality_expr -> . equality_expr eq_op relational_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (49) relational_expr -> . additive_expr
    (50) relational_expr -> . relational_expr rel_op additive_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (44) additive_expr -> . multiplicative_expr
    (45) additive_expr -> . additive_expr + multiplicative_expr
    (46) additive_expr -> . additive_expr - multiplicative_expr
    (47) additive_expr -> . additive_expr DOTADD multiplicative_expr
    (48) additive_expr -> . additive_expr DOTSUB multiplicative_expr
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (39) multiplicative_expr -> . unary_expr
    (40) multiplicative_expr -> . multiplicative_expr * unary_expr
    (41) multiplicative_expr -> . multiplicative_expr / unary_expr
    (42) multiplicative_expr -> . multiplicative_expr DOTMUL unary_expr
    (43) multiplicative_expr -> . multiplicative_expr DOTDIV unary_expr
    (60) matrix -> . [ outer ]

    ZEROS           shift and go to state 43
    ONES            shift and go to state 42
    EYE             shift and go to state 40
    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    additive_expr                  shift and go to state 45
    outer                          shift and go to state 55
    matrix                         shift and go to state 11
    unary_expr                     shift and go to state 37
    relational_expr                shift and go to state 41
    expr                           shift and go to state 57
    equality_expr                  shift and go to state 38
    elem                           shift and go to state 58
    postfix_expr                   shift and go to state 12
    multiplicative_expr            shift and go to state 39
    primary_expr                   shift and go to state 9
    inner                          shift and go to state 56
    assignment_expr                shift and go to state 46

state 22

    (28) primary_expr -> ID .

    [               reduce using rule 28 (primary_expr -> ID .)
    SINGLE_QUOTE    reduce using rule 28 (primary_expr -> ID .)
    =               reduce using rule 28 (primary_expr -> ID .)
    ADDASSIGN       reduce using rule 28 (primary_expr -> ID .)
    SUBASSIGN       reduce using rule 28 (primary_expr -> ID .)
    MULASSIGN       reduce using rule 28 (primary_expr -> ID .)
    DIVASSIGN       reduce using rule 28 (primary_expr -> ID .)
    *               reduce using rule 28 (primary_expr -> ID .)
    /               reduce using rule 28 (primary_expr -> ID .)
    DOTMUL          reduce using rule 28 (primary_expr -> ID .)
    DOTDIV          reduce using rule 28 (primary_expr -> ID .)
    +               reduce using rule 28 (primary_expr -> ID .)
    -               reduce using rule 28 (primary_expr -> ID .)
    DOTADD          reduce using rule 28 (primary_expr -> ID .)
    DOTSUB          reduce using rule 28 (primary_expr -> ID .)
    LT              reduce using rule 28 (primary_expr -> ID .)
    LE              reduce using rule 28 (primary_expr -> ID .)
    GT              reduce using rule 28 (primary_expr -> ID .)
    GE              reduce using rule 28 (primary_expr -> ID .)
    EQ              reduce using rule 28 (primary_expr -> ID .)
    NE              reduce using rule 28 (primary_expr -> ID .)
    ;               reduce using rule 28 (primary_expr -> ID .)
    ,               reduce using rule 28 (primary_expr -> ID .)
    )               reduce using rule 28 (primary_expr -> ID .)
    ]               reduce using rule 28 (primary_expr -> ID .)
    :               reduce using rule 28 (primary_expr -> ID .)
    IF              reduce using rule 28 (primary_expr -> ID .)
    {               reduce using rule 28 (primary_expr -> ID .)
    PRINT           reduce using rule 28 (primary_expr -> ID .)
    WHILE           reduce using rule 28 (primary_expr -> ID .)
    FOR             reduce using rule 28 (primary_expr -> ID .)
    BREAK           reduce using rule 28 (primary_expr -> ID .)
    CONTINUE        reduce using rule 28 (primary_expr -> ID .)
    RETURN          reduce using rule 28 (primary_expr -> ID .)
    ID              reduce using rule 28 (primary_expr -> ID .)
    INTNUM          reduce using rule 28 (primary_expr -> ID .)
    FLOATNUM        reduce using rule 28 (primary_expr -> ID .)
    STRING          reduce using rule 28 (primary_expr -> ID .)
    (               reduce using rule 28 (primary_expr -> ID .)


state 23

    (17) conditional_instruction -> IF . ( expr ) instruction
    (18) conditional_instruction -> IF . ( expr ) instruction ELSE instruction

    (               shift and go to state 59


state 24

    (8) instruction -> compound_instruction .

    }               reduce using rule 8 (instruction -> compound_instruction .)
    IF              reduce using rule 8 (instruction -> compound_instruction .)
    {               reduce using rule 8 (instruction -> compound_instruction .)
    PRINT           reduce using rule 8 (instruction -> compound_instruction .)
    WHILE           reduce using rule 8 (instruction -> compound_instruction .)
    FOR             reduce using rule 8 (instruction -> compound_instruction .)
    BREAK           reduce using rule 8 (instruction -> compound_instruction .)
    CONTINUE        reduce using rule 8 (instruction -> compound_instruction .)
    RETURN          reduce using rule 8 (instruction -> compound_instruction .)
    -               reduce using rule 8 (instruction -> compound_instruction .)
    ID              reduce using rule 8 (instruction -> compound_instruction .)
    INTNUM          reduce using rule 8 (instruction -> compound_instruction .)
    FLOATNUM        reduce using rule 8 (instruction -> compound_instruction .)
    STRING          reduce using rule 8 (instruction -> compound_instruction .)
    (               reduce using rule 8 (instruction -> compound_instruction .)
    [               reduce using rule 8 (instruction -> compound_instruction .)
    $end            reduce using rule 8 (instruction -> compound_instruction .)
    ELSE            reduce using rule 8 (instruction -> compound_instruction .)


state 25

    (5) instructions -> instruction .

    IF              reduce using rule 5 (instructions -> instruction .)
    {               reduce using rule 5 (instructions -> instruction .)
    PRINT           reduce using rule 5 (instructions -> instruction .)
    WHILE           reduce using rule 5 (instructions -> instruction .)
    FOR             reduce using rule 5 (instructions -> instruction .)
    BREAK           reduce using rule 5 (instructions -> instruction .)
    CONTINUE        reduce using rule 5 (instructions -> instruction .)
    RETURN          reduce using rule 5 (instructions -> instruction .)
    -               reduce using rule 5 (instructions -> instruction .)
    ID              reduce using rule 5 (instructions -> instruction .)
    INTNUM          reduce using rule 5 (instructions -> instruction .)
    FLOATNUM        reduce using rule 5 (instructions -> instruction .)
    STRING          reduce using rule 5 (instructions -> instruction .)
    (               reduce using rule 5 (instructions -> instruction .)
    [               reduce using rule 5 (instructions -> instruction .)
    $end            reduce using rule 5 (instructions -> instruction .)
    }               reduce using rule 5 (instructions -> instruction .)


state 26

    (25) jump_instruction -> BREAK . ;

    ;               shift and go to state 60


state 27

    (26) jump_instruction -> CONTINUE . ;

    ;               shift and go to state 61


state 28

    (9) instruction -> print_instruction .

    }               reduce using rule 9 (instruction -> print_instruction .)
    IF              reduce using rule 9 (instruction -> print_instruction .)
    {               reduce using rule 9 (instruction -> print_instruction .)
    PRINT           reduce using rule 9 (instruction -> print_instruction .)
    WHILE           reduce using rule 9 (instruction -> print_instruction .)
    FOR             reduce using rule 9 (instruction -> print_instruction .)
    BREAK           reduce using rule 9 (instruction -> print_instruction .)
    CONTINUE        reduce using rule 9 (instruction -> print_instruction .)
    RETURN          reduce using rule 9 (instruction -> print_instruction .)
    -               reduce using rule 9 (instruction -> print_instruction .)
    ID              reduce using rule 9 (instruction -> print_instruction .)
    INTNUM          reduce using rule 9 (instruction -> print_instruction .)
    FLOATNUM        reduce using rule 9 (instruction -> print_instruction .)
    STRING          reduce using rule 9 (instruction -> print_instruction .)
    (               reduce using rule 9 (instruction -> print_instruction .)
    [               reduce using rule 9 (instruction -> print_instruction .)
    $end            reduce using rule 9 (instruction -> print_instruction .)
    ELSE            reduce using rule 9 (instruction -> print_instruction .)


state 29

    (19) compound_instruction -> { . }
    (20) compound_instruction -> { . instructions }
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instruction -> . assignment_instruction
    (7) instruction -> . conditional_instruction
    (8) instruction -> . compound_instruction
    (9) instruction -> . print_instruction
    (10) instruction -> . iteration_instruction
    (11) instruction -> . jump_instruction
    (12) assignment_instruction -> . unary_expr = expr ;
    (13) assignment_instruction -> . unary_expr ADDASSIGN expr ;
    (14) assignment_instruction -> . unary_expr SUBASSIGN expr ;
    (15) assignment_instruction -> . unary_expr MULASSIGN expr ;
    (16) assignment_instruction -> . unary_expr DIVASSIGN expr ;
    (17) conditional_instruction -> . IF ( expr ) instruction
    (18) conditional_instruction -> . IF ( expr ) instruction ELSE instruction
    (19) compound_instruction -> . { }
    (20) compound_instruction -> . { instructions }
    (21) print_instruction -> . PRINT expr ;
    (22) iteration_instruction -> . WHILE ( expr ) instruction
    (23) iteration_instruction -> . WHILE ( expr ) { instruction
    (24) iteration_instruction -> . FOR iterator_assignment instruction
    (25) jump_instruction -> . BREAK ;
    (26) jump_instruction -> . CONTINUE ;
    (27) jump_instruction -> . RETURN ;
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (60) matrix -> . [ outer ]

    }               shift and go to state 63
    IF              shift and go to state 23
    {               shift and go to state 29
    PRINT           shift and go to state 6
    WHILE           shift and go to state 5
    FOR             shift and go to state 19
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    RETURN          shift and go to state 1
    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    iteration_instruction          shift and go to state 18
    unary_expr                     shift and go to state 2
    compound_instruction           shift and go to state 24
    instruction                    shift and go to state 25
    assignment_instruction         shift and go to state 3
    postfix_expr                   shift and go to state 12
    primary_expr                   shift and go to state 9
    jump_instruction               shift and go to state 16
    print_instruction              shift and go to state 28
    conditional_instruction        shift and go to state 7
    matrix                         shift and go to state 11
    instructions                   shift and go to state 62

state 30

    (27) jump_instruction -> RETURN ; .

    }               reduce using rule 27 (jump_instruction -> RETURN ; .)
    IF              reduce using rule 27 (jump_instruction -> RETURN ; .)
    {               reduce using rule 27 (jump_instruction -> RETURN ; .)
    PRINT           reduce using rule 27 (jump_instruction -> RETURN ; .)
    WHILE           reduce using rule 27 (jump_instruction -> RETURN ; .)
    FOR             reduce using rule 27 (jump_instruction -> RETURN ; .)
    BREAK           reduce using rule 27 (jump_instruction -> RETURN ; .)
    CONTINUE        reduce using rule 27 (jump_instruction -> RETURN ; .)
    RETURN          reduce using rule 27 (jump_instruction -> RETURN ; .)
    -               reduce using rule 27 (jump_instruction -> RETURN ; .)
    ID              reduce using rule 27 (jump_instruction -> RETURN ; .)
    INTNUM          reduce using rule 27 (jump_instruction -> RETURN ; .)
    FLOATNUM        reduce using rule 27 (jump_instruction -> RETURN ; .)
    STRING          reduce using rule 27 (jump_instruction -> RETURN ; .)
    (               reduce using rule 27 (jump_instruction -> RETURN ; .)
    [               reduce using rule 27 (jump_instruction -> RETURN ; .)
    $end            reduce using rule 27 (jump_instruction -> RETURN ; .)
    ELSE            reduce using rule 27 (jump_instruction -> RETURN ; .)


state 31

    (14) assignment_instruction -> unary_expr SUBASSIGN . expr ;
    (55) expr -> . assignment_expr
    (56) expr -> . expr , assignment_expr
    (57) expr -> . ZEROS ( expr )
    (58) expr -> . ONES ( expr )
    (59) expr -> . EYE ( expr )
    (53) assignment_expr -> . equality_expr
    (54) assignment_expr -> . unary_expr assignment_op assignment_expr
    (51) equality_expr -> . relational_expr
    (52) equality_expr -> . equality_expr eq_op relational_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (49) relational_expr -> . additive_expr
    (50) relational_expr -> . relational_expr rel_op additive_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (44) additive_expr -> . multiplicative_expr
    (45) additive_expr -> . additive_expr + multiplicative_expr
    (46) additive_expr -> . additive_expr - multiplicative_expr
    (47) additive_expr -> . additive_expr DOTADD multiplicative_expr
    (48) additive_expr -> . additive_expr DOTSUB multiplicative_expr
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (39) multiplicative_expr -> . unary_expr
    (40) multiplicative_expr -> . multiplicative_expr * unary_expr
    (41) multiplicative_expr -> . multiplicative_expr / unary_expr
    (42) multiplicative_expr -> . multiplicative_expr DOTMUL unary_expr
    (43) multiplicative_expr -> . multiplicative_expr DOTDIV unary_expr
    (60) matrix -> . [ outer ]

    ZEROS           shift and go to state 43
    ONES            shift and go to state 42
    EYE             shift and go to state 40
    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    additive_expr                  shift and go to state 45
    matrix                         shift and go to state 11
    unary_expr                     shift and go to state 37
    relational_expr                shift and go to state 41
    expr                           shift and go to state 64
    equality_expr                  shift and go to state 38
    postfix_expr                   shift and go to state 12
    multiplicative_expr            shift and go to state 39
    primary_expr                   shift and go to state 9
    assignment_expr                shift and go to state 46

state 32

    (16) assignment_instruction -> unary_expr DIVASSIGN . expr ;
    (55) expr -> . assignment_expr
    (56) expr -> . expr , assignment_expr
    (57) expr -> . ZEROS ( expr )
    (58) expr -> . ONES ( expr )
    (59) expr -> . EYE ( expr )
    (53) assignment_expr -> . equality_expr
    (54) assignment_expr -> . unary_expr assignment_op assignment_expr
    (51) equality_expr -> . relational_expr
    (52) equality_expr -> . equality_expr eq_op relational_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (49) relational_expr -> . additive_expr
    (50) relational_expr -> . relational_expr rel_op additive_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (44) additive_expr -> . multiplicative_expr
    (45) additive_expr -> . additive_expr + multiplicative_expr
    (46) additive_expr -> . additive_expr - multiplicative_expr
    (47) additive_expr -> . additive_expr DOTADD multiplicative_expr
    (48) additive_expr -> . additive_expr DOTSUB multiplicative_expr
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (39) multiplicative_expr -> . unary_expr
    (40) multiplicative_expr -> . multiplicative_expr * unary_expr
    (41) multiplicative_expr -> . multiplicative_expr / unary_expr
    (42) multiplicative_expr -> . multiplicative_expr DOTMUL unary_expr
    (43) multiplicative_expr -> . multiplicative_expr DOTDIV unary_expr
    (60) matrix -> . [ outer ]

    ZEROS           shift and go to state 43
    ONES            shift and go to state 42
    EYE             shift and go to state 40
    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    additive_expr                  shift and go to state 45
    matrix                         shift and go to state 11
    unary_expr                     shift and go to state 37
    relational_expr                shift and go to state 41
    expr                           shift and go to state 65
    equality_expr                  shift and go to state 38
    postfix_expr                   shift and go to state 12
    multiplicative_expr            shift and go to state 39
    primary_expr                   shift and go to state 9
    assignment_expr                shift and go to state 46

state 33

    (15) assignment_instruction -> unary_expr MULASSIGN . expr ;
    (55) expr -> . assignment_expr
    (56) expr -> . expr , assignment_expr
    (57) expr -> . ZEROS ( expr )
    (58) expr -> . ONES ( expr )
    (59) expr -> . EYE ( expr )
    (53) assignment_expr -> . equality_expr
    (54) assignment_expr -> . unary_expr assignment_op assignment_expr
    (51) equality_expr -> . relational_expr
    (52) equality_expr -> . equality_expr eq_op relational_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (49) relational_expr -> . additive_expr
    (50) relational_expr -> . relational_expr rel_op additive_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (44) additive_expr -> . multiplicative_expr
    (45) additive_expr -> . additive_expr + multiplicative_expr
    (46) additive_expr -> . additive_expr - multiplicative_expr
    (47) additive_expr -> . additive_expr DOTADD multiplicative_expr
    (48) additive_expr -> . additive_expr DOTSUB multiplicative_expr
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (39) multiplicative_expr -> . unary_expr
    (40) multiplicative_expr -> . multiplicative_expr * unary_expr
    (41) multiplicative_expr -> . multiplicative_expr / unary_expr
    (42) multiplicative_expr -> . multiplicative_expr DOTMUL unary_expr
    (43) multiplicative_expr -> . multiplicative_expr DOTDIV unary_expr
    (60) matrix -> . [ outer ]

    ZEROS           shift and go to state 43
    ONES            shift and go to state 42
    EYE             shift and go to state 40
    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    additive_expr                  shift and go to state 45
    matrix                         shift and go to state 11
    unary_expr                     shift and go to state 37
    relational_expr                shift and go to state 41
    expr                           shift and go to state 66
    equality_expr                  shift and go to state 38
    postfix_expr                   shift and go to state 12
    multiplicative_expr            shift and go to state 39
    primary_expr                   shift and go to state 9
    assignment_expr                shift and go to state 46

state 34

    (13) assignment_instruction -> unary_expr ADDASSIGN . expr ;
    (55) expr -> . assignment_expr
    (56) expr -> . expr , assignment_expr
    (57) expr -> . ZEROS ( expr )
    (58) expr -> . ONES ( expr )
    (59) expr -> . EYE ( expr )
    (53) assignment_expr -> . equality_expr
    (54) assignment_expr -> . unary_expr assignment_op assignment_expr
    (51) equality_expr -> . relational_expr
    (52) equality_expr -> . equality_expr eq_op relational_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (49) relational_expr -> . additive_expr
    (50) relational_expr -> . relational_expr rel_op additive_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (44) additive_expr -> . multiplicative_expr
    (45) additive_expr -> . additive_expr + multiplicative_expr
    (46) additive_expr -> . additive_expr - multiplicative_expr
    (47) additive_expr -> . additive_expr DOTADD multiplicative_expr
    (48) additive_expr -> . additive_expr DOTSUB multiplicative_expr
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (39) multiplicative_expr -> . unary_expr
    (40) multiplicative_expr -> . multiplicative_expr * unary_expr
    (41) multiplicative_expr -> . multiplicative_expr / unary_expr
    (42) multiplicative_expr -> . multiplicative_expr DOTMUL unary_expr
    (43) multiplicative_expr -> . multiplicative_expr DOTDIV unary_expr
    (60) matrix -> . [ outer ]

    ZEROS           shift and go to state 43
    ONES            shift and go to state 42
    EYE             shift and go to state 40
    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    additive_expr                  shift and go to state 45
    matrix                         shift and go to state 11
    unary_expr                     shift and go to state 37
    relational_expr                shift and go to state 41
    expr                           shift and go to state 67
    equality_expr                  shift and go to state 38
    postfix_expr                   shift and go to state 12
    multiplicative_expr            shift and go to state 39
    primary_expr                   shift and go to state 9
    assignment_expr                shift and go to state 46

state 35

    (12) assignment_instruction -> unary_expr = . expr ;
    (55) expr -> . assignment_expr
    (56) expr -> . expr , assignment_expr
    (57) expr -> . ZEROS ( expr )
    (58) expr -> . ONES ( expr )
    (59) expr -> . EYE ( expr )
    (53) assignment_expr -> . equality_expr
    (54) assignment_expr -> . unary_expr assignment_op assignment_expr
    (51) equality_expr -> . relational_expr
    (52) equality_expr -> . equality_expr eq_op relational_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (49) relational_expr -> . additive_expr
    (50) relational_expr -> . relational_expr rel_op additive_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (44) additive_expr -> . multiplicative_expr
    (45) additive_expr -> . additive_expr + multiplicative_expr
    (46) additive_expr -> . additive_expr - multiplicative_expr
    (47) additive_expr -> . additive_expr DOTADD multiplicative_expr
    (48) additive_expr -> . additive_expr DOTSUB multiplicative_expr
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (39) multiplicative_expr -> . unary_expr
    (40) multiplicative_expr -> . multiplicative_expr * unary_expr
    (41) multiplicative_expr -> . multiplicative_expr / unary_expr
    (42) multiplicative_expr -> . multiplicative_expr DOTMUL unary_expr
    (43) multiplicative_expr -> . multiplicative_expr DOTDIV unary_expr
    (60) matrix -> . [ outer ]

    ZEROS           shift and go to state 43
    ONES            shift and go to state 42
    EYE             shift and go to state 40
    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    additive_expr                  shift and go to state 45
    matrix                         shift and go to state 11
    unary_expr                     shift and go to state 37
    relational_expr                shift and go to state 41
    expr                           shift and go to state 68
    equality_expr                  shift and go to state 38
    postfix_expr                   shift and go to state 12
    multiplicative_expr            shift and go to state 39
    primary_expr                   shift and go to state 9
    assignment_expr                shift and go to state 46

state 36

    (22) iteration_instruction -> WHILE ( . expr ) instruction
    (23) iteration_instruction -> WHILE ( . expr ) { instruction
    (55) expr -> . assignment_expr
    (56) expr -> . expr , assignment_expr
    (57) expr -> . ZEROS ( expr )
    (58) expr -> . ONES ( expr )
    (59) expr -> . EYE ( expr )
    (53) assignment_expr -> . equality_expr
    (54) assignment_expr -> . unary_expr assignment_op assignment_expr
    (51) equality_expr -> . relational_expr
    (52) equality_expr -> . equality_expr eq_op relational_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (49) relational_expr -> . additive_expr
    (50) relational_expr -> . relational_expr rel_op additive_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (44) additive_expr -> . multiplicative_expr
    (45) additive_expr -> . additive_expr + multiplicative_expr
    (46) additive_expr -> . additive_expr - multiplicative_expr
    (47) additive_expr -> . additive_expr DOTADD multiplicative_expr
    (48) additive_expr -> . additive_expr DOTSUB multiplicative_expr
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (39) multiplicative_expr -> . unary_expr
    (40) multiplicative_expr -> . multiplicative_expr * unary_expr
    (41) multiplicative_expr -> . multiplicative_expr / unary_expr
    (42) multiplicative_expr -> . multiplicative_expr DOTMUL unary_expr
    (43) multiplicative_expr -> . multiplicative_expr DOTDIV unary_expr
    (60) matrix -> . [ outer ]

    ZEROS           shift and go to state 43
    ONES            shift and go to state 42
    EYE             shift and go to state 40
    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    equality_expr                  shift and go to state 38
    matrix                         shift and go to state 11
    unary_expr                     shift and go to state 37
    relational_expr                shift and go to state 41
    expr                           shift and go to state 69
    postfix_expr                   shift and go to state 12
    multiplicative_expr            shift and go to state 39
    primary_expr                   shift and go to state 9
    assignment_expr                shift and go to state 46
    additive_expr                  shift and go to state 45

state 37

    (54) assignment_expr -> unary_expr . assignment_op assignment_expr
    (39) multiplicative_expr -> unary_expr .
    (67) assignment_op -> . =
    (68) assignment_op -> . ADDASSIGN
    (69) assignment_op -> . SUBASSIGN
    (70) assignment_op -> . MULASSIGN
    (71) assignment_op -> . DIVASSIGN

    *               reduce using rule 39 (multiplicative_expr -> unary_expr .)
    /               reduce using rule 39 (multiplicative_expr -> unary_expr .)
    DOTMUL          reduce using rule 39 (multiplicative_expr -> unary_expr .)
    DOTDIV          reduce using rule 39 (multiplicative_expr -> unary_expr .)
    +               reduce using rule 39 (multiplicative_expr -> unary_expr .)
    -               reduce using rule 39 (multiplicative_expr -> unary_expr .)
    DOTADD          reduce using rule 39 (multiplicative_expr -> unary_expr .)
    DOTSUB          reduce using rule 39 (multiplicative_expr -> unary_expr .)
    LT              reduce using rule 39 (multiplicative_expr -> unary_expr .)
    LE              reduce using rule 39 (multiplicative_expr -> unary_expr .)
    GT              reduce using rule 39 (multiplicative_expr -> unary_expr .)
    GE              reduce using rule 39 (multiplicative_expr -> unary_expr .)
    EQ              reduce using rule 39 (multiplicative_expr -> unary_expr .)
    NE              reduce using rule 39 (multiplicative_expr -> unary_expr .)
    ,               reduce using rule 39 (multiplicative_expr -> unary_expr .)
    ]               reduce using rule 39 (multiplicative_expr -> unary_expr .)
    ;               reduce using rule 39 (multiplicative_expr -> unary_expr .)
    )               reduce using rule 39 (multiplicative_expr -> unary_expr .)
    IF              reduce using rule 39 (multiplicative_expr -> unary_expr .)
    {               reduce using rule 39 (multiplicative_expr -> unary_expr .)
    PRINT           reduce using rule 39 (multiplicative_expr -> unary_expr .)
    WHILE           reduce using rule 39 (multiplicative_expr -> unary_expr .)
    FOR             reduce using rule 39 (multiplicative_expr -> unary_expr .)
    BREAK           reduce using rule 39 (multiplicative_expr -> unary_expr .)
    CONTINUE        reduce using rule 39 (multiplicative_expr -> unary_expr .)
    RETURN          reduce using rule 39 (multiplicative_expr -> unary_expr .)
    ID              reduce using rule 39 (multiplicative_expr -> unary_expr .)
    INTNUM          reduce using rule 39 (multiplicative_expr -> unary_expr .)
    FLOATNUM        reduce using rule 39 (multiplicative_expr -> unary_expr .)
    STRING          reduce using rule 39 (multiplicative_expr -> unary_expr .)
    (               reduce using rule 39 (multiplicative_expr -> unary_expr .)
    [               reduce using rule 39 (multiplicative_expr -> unary_expr .)
    :               reduce using rule 39 (multiplicative_expr -> unary_expr .)
    =               shift and go to state 75
    ADDASSIGN       shift and go to state 73
    SUBASSIGN       shift and go to state 70
    MULASSIGN       shift and go to state 72
    DIVASSIGN       shift and go to state 71

    assignment_op                  shift and go to state 74

state 38

    (53) assignment_expr -> equality_expr .
    (52) equality_expr -> equality_expr . eq_op relational_expr
    (76) eq_op -> . EQ
    (77) eq_op -> . NE

    ;               reduce using rule 53 (assignment_expr -> equality_expr .)
    ,               reduce using rule 53 (assignment_expr -> equality_expr .)
    )               reduce using rule 53 (assignment_expr -> equality_expr .)
    ]               reduce using rule 53 (assignment_expr -> equality_expr .)
    :               reduce using rule 53 (assignment_expr -> equality_expr .)
    IF              reduce using rule 53 (assignment_expr -> equality_expr .)
    {               reduce using rule 53 (assignment_expr -> equality_expr .)
    PRINT           reduce using rule 53 (assignment_expr -> equality_expr .)
    WHILE           reduce using rule 53 (assignment_expr -> equality_expr .)
    FOR             reduce using rule 53 (assignment_expr -> equality_expr .)
    BREAK           reduce using rule 53 (assignment_expr -> equality_expr .)
    CONTINUE        reduce using rule 53 (assignment_expr -> equality_expr .)
    RETURN          reduce using rule 53 (assignment_expr -> equality_expr .)
    -               reduce using rule 53 (assignment_expr -> equality_expr .)
    ID              reduce using rule 53 (assignment_expr -> equality_expr .)
    INTNUM          reduce using rule 53 (assignment_expr -> equality_expr .)
    FLOATNUM        reduce using rule 53 (assignment_expr -> equality_expr .)
    STRING          reduce using rule 53 (assignment_expr -> equality_expr .)
    (               reduce using rule 53 (assignment_expr -> equality_expr .)
    [               reduce using rule 53 (assignment_expr -> equality_expr .)
    EQ              shift and go to state 76
    NE              shift and go to state 78

    eq_op                          shift and go to state 77

state 39

    (44) additive_expr -> multiplicative_expr .
    (40) multiplicative_expr -> multiplicative_expr . * unary_expr
    (41) multiplicative_expr -> multiplicative_expr . / unary_expr
    (42) multiplicative_expr -> multiplicative_expr . DOTMUL unary_expr
    (43) multiplicative_expr -> multiplicative_expr . DOTDIV unary_expr

    +               reduce using rule 44 (additive_expr -> multiplicative_expr .)
    -               reduce using rule 44 (additive_expr -> multiplicative_expr .)
    DOTADD          reduce using rule 44 (additive_expr -> multiplicative_expr .)
    DOTSUB          reduce using rule 44 (additive_expr -> multiplicative_expr .)
    LT              reduce using rule 44 (additive_expr -> multiplicative_expr .)
    LE              reduce using rule 44 (additive_expr -> multiplicative_expr .)
    GT              reduce using rule 44 (additive_expr -> multiplicative_expr .)
    GE              reduce using rule 44 (additive_expr -> multiplicative_expr .)
    EQ              reduce using rule 44 (additive_expr -> multiplicative_expr .)
    NE              reduce using rule 44 (additive_expr -> multiplicative_expr .)
    )               reduce using rule 44 (additive_expr -> multiplicative_expr .)
    ,               reduce using rule 44 (additive_expr -> multiplicative_expr .)
    ;               reduce using rule 44 (additive_expr -> multiplicative_expr .)
    ]               reduce using rule 44 (additive_expr -> multiplicative_expr .)
    :               reduce using rule 44 (additive_expr -> multiplicative_expr .)
    IF              reduce using rule 44 (additive_expr -> multiplicative_expr .)
    {               reduce using rule 44 (additive_expr -> multiplicative_expr .)
    PRINT           reduce using rule 44 (additive_expr -> multiplicative_expr .)
    WHILE           reduce using rule 44 (additive_expr -> multiplicative_expr .)
    FOR             reduce using rule 44 (additive_expr -> multiplicative_expr .)
    BREAK           reduce using rule 44 (additive_expr -> multiplicative_expr .)
    CONTINUE        reduce using rule 44 (additive_expr -> multiplicative_expr .)
    RETURN          reduce using rule 44 (additive_expr -> multiplicative_expr .)
    ID              reduce using rule 44 (additive_expr -> multiplicative_expr .)
    INTNUM          reduce using rule 44 (additive_expr -> multiplicative_expr .)
    FLOATNUM        reduce using rule 44 (additive_expr -> multiplicative_expr .)
    STRING          reduce using rule 44 (additive_expr -> multiplicative_expr .)
    (               reduce using rule 44 (additive_expr -> multiplicative_expr .)
    [               reduce using rule 44 (additive_expr -> multiplicative_expr .)
    *               shift and go to state 80
    /               shift and go to state 81
    DOTMUL          shift and go to state 82
    DOTDIV          shift and go to state 79


state 40

    (59) expr -> EYE . ( expr )

    (               shift and go to state 83


state 41

    (51) equality_expr -> relational_expr .
    (50) relational_expr -> relational_expr . rel_op additive_expr
    (72) rel_op -> . LT
    (73) rel_op -> . LE
    (74) rel_op -> . GT
    (75) rel_op -> . GE

    EQ              reduce using rule 51 (equality_expr -> relational_expr .)
    NE              reduce using rule 51 (equality_expr -> relational_expr .)
    )               reduce using rule 51 (equality_expr -> relational_expr .)
    ,               reduce using rule 51 (equality_expr -> relational_expr .)
    ;               reduce using rule 51 (equality_expr -> relational_expr .)
    ]               reduce using rule 51 (equality_expr -> relational_expr .)
    :               reduce using rule 51 (equality_expr -> relational_expr .)
    IF              reduce using rule 51 (equality_expr -> relational_expr .)
    {               reduce using rule 51 (equality_expr -> relational_expr .)
    PRINT           reduce using rule 51 (equality_expr -> relational_expr .)
    WHILE           reduce using rule 51 (equality_expr -> relational_expr .)
    FOR             reduce using rule 51 (equality_expr -> relational_expr .)
    BREAK           reduce using rule 51 (equality_expr -> relational_expr .)
    CONTINUE        reduce using rule 51 (equality_expr -> relational_expr .)
    RETURN          reduce using rule 51 (equality_expr -> relational_expr .)
    -               reduce using rule 51 (equality_expr -> relational_expr .)
    ID              reduce using rule 51 (equality_expr -> relational_expr .)
    INTNUM          reduce using rule 51 (equality_expr -> relational_expr .)
    FLOATNUM        reduce using rule 51 (equality_expr -> relational_expr .)
    STRING          reduce using rule 51 (equality_expr -> relational_expr .)
    (               reduce using rule 51 (equality_expr -> relational_expr .)
    [               reduce using rule 51 (equality_expr -> relational_expr .)
    LT              shift and go to state 86
    LE              shift and go to state 87
    GT              shift and go to state 84
    GE              shift and go to state 85

    rel_op                         shift and go to state 88

state 42

    (58) expr -> ONES . ( expr )

    (               shift and go to state 89


state 43

    (57) expr -> ZEROS . ( expr )

    (               shift and go to state 90


state 44

    (21) print_instruction -> PRINT expr . ;
    (56) expr -> expr . , assignment_expr

    ;               shift and go to state 91
    ,               shift and go to state 92


state 45

    (49) relational_expr -> additive_expr .
    (45) additive_expr -> additive_expr . + multiplicative_expr
    (46) additive_expr -> additive_expr . - multiplicative_expr
    (47) additive_expr -> additive_expr . DOTADD multiplicative_expr
    (48) additive_expr -> additive_expr . DOTSUB multiplicative_expr

  ! shift/reduce conflict for - resolved as shift
    LT              reduce using rule 49 (relational_expr -> additive_expr .)
    LE              reduce using rule 49 (relational_expr -> additive_expr .)
    GT              reduce using rule 49 (relational_expr -> additive_expr .)
    GE              reduce using rule 49 (relational_expr -> additive_expr .)
    EQ              reduce using rule 49 (relational_expr -> additive_expr .)
    NE              reduce using rule 49 (relational_expr -> additive_expr .)
    )               reduce using rule 49 (relational_expr -> additive_expr .)
    ,               reduce using rule 49 (relational_expr -> additive_expr .)
    ]               reduce using rule 49 (relational_expr -> additive_expr .)
    ;               reduce using rule 49 (relational_expr -> additive_expr .)
    :               reduce using rule 49 (relational_expr -> additive_expr .)
    IF              reduce using rule 49 (relational_expr -> additive_expr .)
    {               reduce using rule 49 (relational_expr -> additive_expr .)
    PRINT           reduce using rule 49 (relational_expr -> additive_expr .)
    WHILE           reduce using rule 49 (relational_expr -> additive_expr .)
    FOR             reduce using rule 49 (relational_expr -> additive_expr .)
    BREAK           reduce using rule 49 (relational_expr -> additive_expr .)
    CONTINUE        reduce using rule 49 (relational_expr -> additive_expr .)
    RETURN          reduce using rule 49 (relational_expr -> additive_expr .)
    ID              reduce using rule 49 (relational_expr -> additive_expr .)
    INTNUM          reduce using rule 49 (relational_expr -> additive_expr .)
    FLOATNUM        reduce using rule 49 (relational_expr -> additive_expr .)
    STRING          reduce using rule 49 (relational_expr -> additive_expr .)
    (               reduce using rule 49 (relational_expr -> additive_expr .)
    [               reduce using rule 49 (relational_expr -> additive_expr .)
    +               shift and go to state 93
    -               shift and go to state 94
    DOTADD          shift and go to state 96
    DOTSUB          shift and go to state 95

  ! -               [ reduce using rule 49 (relational_expr -> additive_expr .) ]


state 46

    (55) expr -> assignment_expr .

    )               reduce using rule 55 (expr -> assignment_expr .)
    ,               reduce using rule 55 (expr -> assignment_expr .)
    ;               reduce using rule 55 (expr -> assignment_expr .)
    :               reduce using rule 55 (expr -> assignment_expr .)
    ]               reduce using rule 55 (expr -> assignment_expr .)
    IF              reduce using rule 55 (expr -> assignment_expr .)
    {               reduce using rule 55 (expr -> assignment_expr .)
    PRINT           reduce using rule 55 (expr -> assignment_expr .)
    WHILE           reduce using rule 55 (expr -> assignment_expr .)
    FOR             reduce using rule 55 (expr -> assignment_expr .)
    BREAK           reduce using rule 55 (expr -> assignment_expr .)
    CONTINUE        reduce using rule 55 (expr -> assignment_expr .)
    RETURN          reduce using rule 55 (expr -> assignment_expr .)
    -               reduce using rule 55 (expr -> assignment_expr .)
    ID              reduce using rule 55 (expr -> assignment_expr .)
    INTNUM          reduce using rule 55 (expr -> assignment_expr .)
    FLOATNUM        reduce using rule 55 (expr -> assignment_expr .)
    STRING          reduce using rule 55 (expr -> assignment_expr .)
    (               reduce using rule 55 (expr -> assignment_expr .)
    [               reduce using rule 55 (expr -> assignment_expr .)


state 47

    (35) postfix_expr -> postfix_expr [ . expr ]
    (55) expr -> . assignment_expr
    (56) expr -> . expr , assignment_expr
    (57) expr -> . ZEROS ( expr )
    (58) expr -> . ONES ( expr )
    (59) expr -> . EYE ( expr )
    (53) assignment_expr -> . equality_expr
    (54) assignment_expr -> . unary_expr assignment_op assignment_expr
    (51) equality_expr -> . relational_expr
    (52) equality_expr -> . equality_expr eq_op relational_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (49) relational_expr -> . additive_expr
    (50) relational_expr -> . relational_expr rel_op additive_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (44) additive_expr -> . multiplicative_expr
    (45) additive_expr -> . additive_expr + multiplicative_expr
    (46) additive_expr -> . additive_expr - multiplicative_expr
    (47) additive_expr -> . additive_expr DOTADD multiplicative_expr
    (48) additive_expr -> . additive_expr DOTSUB multiplicative_expr
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (39) multiplicative_expr -> . unary_expr
    (40) multiplicative_expr -> . multiplicative_expr * unary_expr
    (41) multiplicative_expr -> . multiplicative_expr / unary_expr
    (42) multiplicative_expr -> . multiplicative_expr DOTMUL unary_expr
    (43) multiplicative_expr -> . multiplicative_expr DOTDIV unary_expr
    (60) matrix -> . [ outer ]

    ZEROS           shift and go to state 43
    ONES            shift and go to state 42
    EYE             shift and go to state 40
    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    additive_expr                  shift and go to state 45
    matrix                         shift and go to state 11
    unary_expr                     shift and go to state 37
    relational_expr                shift and go to state 41
    expr                           shift and go to state 97
    equality_expr                  shift and go to state 38
    postfix_expr                   shift and go to state 12
    multiplicative_expr            shift and go to state 39
    primary_expr                   shift and go to state 9
    assignment_expr                shift and go to state 46

state 48

    (36) postfix_expr -> postfix_expr SINGLE_QUOTE .

    [               reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    SINGLE_QUOTE    reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    *               reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    /               reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    DOTMUL          reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    DOTDIV          reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    +               reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    -               reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    DOTADD          reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    DOTSUB          reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    LT              reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    LE              reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    GT              reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    GE              reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    EQ              reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    NE              reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    ;               reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    ,               reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    )               reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    ]               reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    :               reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    IF              reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    {               reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    PRINT           reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    WHILE           reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    FOR             reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    BREAK           reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    CONTINUE        reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    RETURN          reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    ID              reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    INTNUM          reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    FLOATNUM        reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    STRING          reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    (               reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    =               reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    ADDASSIGN       reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    SUBASSIGN       reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    MULASSIGN       reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)
    DIVASSIGN       reduce using rule 36 (postfix_expr -> postfix_expr SINGLE_QUOTE .)


state 49

    (33) primary_expr -> ( expr . )
    (56) expr -> expr . , assignment_expr

    )               shift and go to state 98
    ,               shift and go to state 92


state 50

    (39) multiplicative_expr -> unary_expr .

    *               reduce using rule 39 (multiplicative_expr -> unary_expr .)
    /               reduce using rule 39 (multiplicative_expr -> unary_expr .)
    DOTMUL          reduce using rule 39 (multiplicative_expr -> unary_expr .)
    DOTDIV          reduce using rule 39 (multiplicative_expr -> unary_expr .)
    +               reduce using rule 39 (multiplicative_expr -> unary_expr .)
    -               reduce using rule 39 (multiplicative_expr -> unary_expr .)
    DOTADD          reduce using rule 39 (multiplicative_expr -> unary_expr .)
    DOTSUB          reduce using rule 39 (multiplicative_expr -> unary_expr .)
    LT              reduce using rule 39 (multiplicative_expr -> unary_expr .)
    LE              reduce using rule 39 (multiplicative_expr -> unary_expr .)
    GT              reduce using rule 39 (multiplicative_expr -> unary_expr .)
    GE              reduce using rule 39 (multiplicative_expr -> unary_expr .)
    EQ              reduce using rule 39 (multiplicative_expr -> unary_expr .)
    NE              reduce using rule 39 (multiplicative_expr -> unary_expr .)
    ;               reduce using rule 39 (multiplicative_expr -> unary_expr .)
    ,               reduce using rule 39 (multiplicative_expr -> unary_expr .)
    )               reduce using rule 39 (multiplicative_expr -> unary_expr .)
    ]               reduce using rule 39 (multiplicative_expr -> unary_expr .)
    :               reduce using rule 39 (multiplicative_expr -> unary_expr .)
    IF              reduce using rule 39 (multiplicative_expr -> unary_expr .)
    {               reduce using rule 39 (multiplicative_expr -> unary_expr .)
    PRINT           reduce using rule 39 (multiplicative_expr -> unary_expr .)
    WHILE           reduce using rule 39 (multiplicative_expr -> unary_expr .)
    FOR             reduce using rule 39 (multiplicative_expr -> unary_expr .)
    BREAK           reduce using rule 39 (multiplicative_expr -> unary_expr .)
    CONTINUE        reduce using rule 39 (multiplicative_expr -> unary_expr .)
    RETURN          reduce using rule 39 (multiplicative_expr -> unary_expr .)
    ID              reduce using rule 39 (multiplicative_expr -> unary_expr .)
    INTNUM          reduce using rule 39 (multiplicative_expr -> unary_expr .)
    FLOATNUM        reduce using rule 39 (multiplicative_expr -> unary_expr .)
    STRING          reduce using rule 39 (multiplicative_expr -> unary_expr .)
    (               reduce using rule 39 (multiplicative_expr -> unary_expr .)
    [               reduce using rule 39 (multiplicative_expr -> unary_expr .)
    =               reduce using rule 39 (multiplicative_expr -> unary_expr .)
    ADDASSIGN       reduce using rule 39 (multiplicative_expr -> unary_expr .)
    SUBASSIGN       reduce using rule 39 (multiplicative_expr -> unary_expr .)
    MULASSIGN       reduce using rule 39 (multiplicative_expr -> unary_expr .)
    DIVASSIGN       reduce using rule 39 (multiplicative_expr -> unary_expr .)


state 51

    (38) unary_expr -> - multiplicative_expr .
    (40) multiplicative_expr -> multiplicative_expr . * unary_expr
    (41) multiplicative_expr -> multiplicative_expr . / unary_expr
    (42) multiplicative_expr -> multiplicative_expr . DOTMUL unary_expr
    (43) multiplicative_expr -> multiplicative_expr . DOTDIV unary_expr

    =               reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    ADDASSIGN       reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    SUBASSIGN       reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    MULASSIGN       reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    DIVASSIGN       reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    *               reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    /               reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    DOTMUL          reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    DOTDIV          reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    +               reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    -               reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    DOTADD          reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    DOTSUB          reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    LT              reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    LE              reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    GT              reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    GE              reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    EQ              reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    NE              reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    ;               reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    ,               reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    )               reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    ]               reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    :               reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    IF              reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    {               reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    PRINT           reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    WHILE           reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    FOR             reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    BREAK           reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    CONTINUE        reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    RETURN          reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    ID              reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    INTNUM          reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    FLOATNUM        reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    STRING          reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    (               reduce using rule 38 (unary_expr -> - multiplicative_expr .)
    [               reduce using rule 38 (unary_expr -> - multiplicative_expr .)

  ! *               [ shift and go to state 80 ]
  ! /               [ shift and go to state 81 ]
  ! DOTMUL          [ shift and go to state 82 ]
  ! DOTDIV          [ shift and go to state 79 ]


state 52

    (4) instructions -> instructions instruction .

    }               reduce using rule 4 (instructions -> instructions instruction .)
    IF              reduce using rule 4 (instructions -> instructions instruction .)
    {               reduce using rule 4 (instructions -> instructions instruction .)
    PRINT           reduce using rule 4 (instructions -> instructions instruction .)
    WHILE           reduce using rule 4 (instructions -> instructions instruction .)
    FOR             reduce using rule 4 (instructions -> instructions instruction .)
    BREAK           reduce using rule 4 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 4 (instructions -> instructions instruction .)
    RETURN          reduce using rule 4 (instructions -> instructions instruction .)
    -               reduce using rule 4 (instructions -> instructions instruction .)
    ID              reduce using rule 4 (instructions -> instructions instruction .)
    INTNUM          reduce using rule 4 (instructions -> instructions instruction .)
    FLOATNUM        reduce using rule 4 (instructions -> instructions instruction .)
    STRING          reduce using rule 4 (instructions -> instructions instruction .)
    (               reduce using rule 4 (instructions -> instructions instruction .)
    [               reduce using rule 4 (instructions -> instructions instruction .)
    $end            reduce using rule 4 (instructions -> instructions instruction .)


state 53

    (24) iteration_instruction -> FOR iterator_assignment . instruction
    (6) instruction -> . assignment_instruction
    (7) instruction -> . conditional_instruction
    (8) instruction -> . compound_instruction
    (9) instruction -> . print_instruction
    (10) instruction -> . iteration_instruction
    (11) instruction -> . jump_instruction
    (12) assignment_instruction -> . unary_expr = expr ;
    (13) assignment_instruction -> . unary_expr ADDASSIGN expr ;
    (14) assignment_instruction -> . unary_expr SUBASSIGN expr ;
    (15) assignment_instruction -> . unary_expr MULASSIGN expr ;
    (16) assignment_instruction -> . unary_expr DIVASSIGN expr ;
    (17) conditional_instruction -> . IF ( expr ) instruction
    (18) conditional_instruction -> . IF ( expr ) instruction ELSE instruction
    (19) compound_instruction -> . { }
    (20) compound_instruction -> . { instructions }
    (21) print_instruction -> . PRINT expr ;
    (22) iteration_instruction -> . WHILE ( expr ) instruction
    (23) iteration_instruction -> . WHILE ( expr ) { instruction
    (24) iteration_instruction -> . FOR iterator_assignment instruction
    (25) jump_instruction -> . BREAK ;
    (26) jump_instruction -> . CONTINUE ;
    (27) jump_instruction -> . RETURN ;
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (60) matrix -> . [ outer ]

    IF              shift and go to state 23
    {               shift and go to state 29
    PRINT           shift and go to state 6
    WHILE           shift and go to state 5
    FOR             shift and go to state 19
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    RETURN          shift and go to state 1
    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    iteration_instruction          shift and go to state 18
    unary_expr                     shift and go to state 2
    compound_instruction           shift and go to state 24
    instruction                    shift and go to state 99
    assignment_instruction         shift and go to state 3
    postfix_expr                   shift and go to state 12
    primary_expr                   shift and go to state 9
    jump_instruction               shift and go to state 16
    print_instruction              shift and go to state 28
    conditional_instruction        shift and go to state 7
    matrix                         shift and go to state 11

state 54

    (66) iterator_assignment -> ID . = expr : expr

    =               shift and go to state 100


state 55

    (60) matrix -> [ outer . ]
    (61) outer -> outer . ; inner

    ]               shift and go to state 101
    ;               shift and go to state 102


state 56

    (62) outer -> inner .
    (63) inner -> inner . , elem

    ]               reduce using rule 62 (outer -> inner .)
    ;               reduce using rule 62 (outer -> inner .)
    ,               shift and go to state 103


state 57

    (65) elem -> expr .
    (56) expr -> expr . , assignment_expr

  ! shift/reduce conflict for , resolved as shift
    ]               reduce using rule 65 (elem -> expr .)
    ;               reduce using rule 65 (elem -> expr .)
    ,               shift and go to state 92

  ! ,               [ reduce using rule 65 (elem -> expr .) ]


state 58

    (64) inner -> elem .

    ,               reduce using rule 64 (inner -> elem .)
    ]               reduce using rule 64 (inner -> elem .)
    ;               reduce using rule 64 (inner -> elem .)


state 59

    (17) conditional_instruction -> IF ( . expr ) instruction
    (18) conditional_instruction -> IF ( . expr ) instruction ELSE instruction
    (55) expr -> . assignment_expr
    (56) expr -> . expr , assignment_expr
    (57) expr -> . ZEROS ( expr )
    (58) expr -> . ONES ( expr )
    (59) expr -> . EYE ( expr )
    (53) assignment_expr -> . equality_expr
    (54) assignment_expr -> . unary_expr assignment_op assignment_expr
    (51) equality_expr -> . relational_expr
    (52) equality_expr -> . equality_expr eq_op relational_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (49) relational_expr -> . additive_expr
    (50) relational_expr -> . relational_expr rel_op additive_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (44) additive_expr -> . multiplicative_expr
    (45) additive_expr -> . additive_expr + multiplicative_expr
    (46) additive_expr -> . additive_expr - multiplicative_expr
    (47) additive_expr -> . additive_expr DOTADD multiplicative_expr
    (48) additive_expr -> . additive_expr DOTSUB multiplicative_expr
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (39) multiplicative_expr -> . unary_expr
    (40) multiplicative_expr -> . multiplicative_expr * unary_expr
    (41) multiplicative_expr -> . multiplicative_expr / unary_expr
    (42) multiplicative_expr -> . multiplicative_expr DOTMUL unary_expr
    (43) multiplicative_expr -> . multiplicative_expr DOTDIV unary_expr
    (60) matrix -> . [ outer ]

    ZEROS           shift and go to state 43
    ONES            shift and go to state 42
    EYE             shift and go to state 40
    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    equality_expr                  shift and go to state 38
    matrix                         shift and go to state 11
    unary_expr                     shift and go to state 37
    relational_expr                shift and go to state 41
    expr                           shift and go to state 104
    postfix_expr                   shift and go to state 12
    multiplicative_expr            shift and go to state 39
    primary_expr                   shift and go to state 9
    assignment_expr                shift and go to state 46
    additive_expr                  shift and go to state 45

state 60

    (25) jump_instruction -> BREAK ; .

    }               reduce using rule 25 (jump_instruction -> BREAK ; .)
    IF              reduce using rule 25 (jump_instruction -> BREAK ; .)
    {               reduce using rule 25 (jump_instruction -> BREAK ; .)
    PRINT           reduce using rule 25 (jump_instruction -> BREAK ; .)
    WHILE           reduce using rule 25 (jump_instruction -> BREAK ; .)
    FOR             reduce using rule 25 (jump_instruction -> BREAK ; .)
    BREAK           reduce using rule 25 (jump_instruction -> BREAK ; .)
    CONTINUE        reduce using rule 25 (jump_instruction -> BREAK ; .)
    RETURN          reduce using rule 25 (jump_instruction -> BREAK ; .)
    -               reduce using rule 25 (jump_instruction -> BREAK ; .)
    ID              reduce using rule 25 (jump_instruction -> BREAK ; .)
    INTNUM          reduce using rule 25 (jump_instruction -> BREAK ; .)
    FLOATNUM        reduce using rule 25 (jump_instruction -> BREAK ; .)
    STRING          reduce using rule 25 (jump_instruction -> BREAK ; .)
    (               reduce using rule 25 (jump_instruction -> BREAK ; .)
    [               reduce using rule 25 (jump_instruction -> BREAK ; .)
    $end            reduce using rule 25 (jump_instruction -> BREAK ; .)
    ELSE            reduce using rule 25 (jump_instruction -> BREAK ; .)


state 61

    (26) jump_instruction -> CONTINUE ; .

    }               reduce using rule 26 (jump_instruction -> CONTINUE ; .)
    IF              reduce using rule 26 (jump_instruction -> CONTINUE ; .)
    {               reduce using rule 26 (jump_instruction -> CONTINUE ; .)
    PRINT           reduce using rule 26 (jump_instruction -> CONTINUE ; .)
    WHILE           reduce using rule 26 (jump_instruction -> CONTINUE ; .)
    FOR             reduce using rule 26 (jump_instruction -> CONTINUE ; .)
    BREAK           reduce using rule 26 (jump_instruction -> CONTINUE ; .)
    CONTINUE        reduce using rule 26 (jump_instruction -> CONTINUE ; .)
    RETURN          reduce using rule 26 (jump_instruction -> CONTINUE ; .)
    -               reduce using rule 26 (jump_instruction -> CONTINUE ; .)
    ID              reduce using rule 26 (jump_instruction -> CONTINUE ; .)
    INTNUM          reduce using rule 26 (jump_instruction -> CONTINUE ; .)
    FLOATNUM        reduce using rule 26 (jump_instruction -> CONTINUE ; .)
    STRING          reduce using rule 26 (jump_instruction -> CONTINUE ; .)
    (               reduce using rule 26 (jump_instruction -> CONTINUE ; .)
    [               reduce using rule 26 (jump_instruction -> CONTINUE ; .)
    $end            reduce using rule 26 (jump_instruction -> CONTINUE ; .)
    ELSE            reduce using rule 26 (jump_instruction -> CONTINUE ; .)


state 62

    (20) compound_instruction -> { instructions . }
    (4) instructions -> instructions . instruction
    (6) instruction -> . assignment_instruction
    (7) instruction -> . conditional_instruction
    (8) instruction -> . compound_instruction
    (9) instruction -> . print_instruction
    (10) instruction -> . iteration_instruction
    (11) instruction -> . jump_instruction
    (12) assignment_instruction -> . unary_expr = expr ;
    (13) assignment_instruction -> . unary_expr ADDASSIGN expr ;
    (14) assignment_instruction -> . unary_expr SUBASSIGN expr ;
    (15) assignment_instruction -> . unary_expr MULASSIGN expr ;
    (16) assignment_instruction -> . unary_expr DIVASSIGN expr ;
    (17) conditional_instruction -> . IF ( expr ) instruction
    (18) conditional_instruction -> . IF ( expr ) instruction ELSE instruction
    (19) compound_instruction -> . { }
    (20) compound_instruction -> . { instructions }
    (21) print_instruction -> . PRINT expr ;
    (22) iteration_instruction -> . WHILE ( expr ) instruction
    (23) iteration_instruction -> . WHILE ( expr ) { instruction
    (24) iteration_instruction -> . FOR iterator_assignment instruction
    (25) jump_instruction -> . BREAK ;
    (26) jump_instruction -> . CONTINUE ;
    (27) jump_instruction -> . RETURN ;
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (60) matrix -> . [ outer ]

    }               shift and go to state 105
    IF              shift and go to state 23
    {               shift and go to state 29
    PRINT           shift and go to state 6
    WHILE           shift and go to state 5
    FOR             shift and go to state 19
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    RETURN          shift and go to state 1
    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    iteration_instruction          shift and go to state 18
    unary_expr                     shift and go to state 2
    compound_instruction           shift and go to state 24
    instruction                    shift and go to state 52
    assignment_instruction         shift and go to state 3
    postfix_expr                   shift and go to state 12
    primary_expr                   shift and go to state 9
    jump_instruction               shift and go to state 16
    print_instruction              shift and go to state 28
    conditional_instruction        shift and go to state 7
    matrix                         shift and go to state 11

state 63

    (19) compound_instruction -> { } .

    }               reduce using rule 19 (compound_instruction -> { } .)
    IF              reduce using rule 19 (compound_instruction -> { } .)
    {               reduce using rule 19 (compound_instruction -> { } .)
    PRINT           reduce using rule 19 (compound_instruction -> { } .)
    WHILE           reduce using rule 19 (compound_instruction -> { } .)
    FOR             reduce using rule 19 (compound_instruction -> { } .)
    BREAK           reduce using rule 19 (compound_instruction -> { } .)
    CONTINUE        reduce using rule 19 (compound_instruction -> { } .)
    RETURN          reduce using rule 19 (compound_instruction -> { } .)
    -               reduce using rule 19 (compound_instruction -> { } .)
    ID              reduce using rule 19 (compound_instruction -> { } .)
    INTNUM          reduce using rule 19 (compound_instruction -> { } .)
    FLOATNUM        reduce using rule 19 (compound_instruction -> { } .)
    STRING          reduce using rule 19 (compound_instruction -> { } .)
    (               reduce using rule 19 (compound_instruction -> { } .)
    [               reduce using rule 19 (compound_instruction -> { } .)
    $end            reduce using rule 19 (compound_instruction -> { } .)
    ELSE            reduce using rule 19 (compound_instruction -> { } .)


state 64

    (14) assignment_instruction -> unary_expr SUBASSIGN expr . ;
    (56) expr -> expr . , assignment_expr

    ;               shift and go to state 106
    ,               shift and go to state 92


state 65

    (16) assignment_instruction -> unary_expr DIVASSIGN expr . ;
    (56) expr -> expr . , assignment_expr

    ;               shift and go to state 107
    ,               shift and go to state 92


state 66

    (15) assignment_instruction -> unary_expr MULASSIGN expr . ;
    (56) expr -> expr . , assignment_expr

    ;               shift and go to state 108
    ,               shift and go to state 92


state 67

    (13) assignment_instruction -> unary_expr ADDASSIGN expr . ;
    (56) expr -> expr . , assignment_expr

    ;               shift and go to state 109
    ,               shift and go to state 92


state 68

    (12) assignment_instruction -> unary_expr = expr . ;
    (56) expr -> expr . , assignment_expr

    ;               shift and go to state 110
    ,               shift and go to state 92


state 69

    (22) iteration_instruction -> WHILE ( expr . ) instruction
    (23) iteration_instruction -> WHILE ( expr . ) { instruction
    (56) expr -> expr . , assignment_expr

    )               shift and go to state 111
    ,               shift and go to state 92


state 70

    (69) assignment_op -> SUBASSIGN .

    -               reduce using rule 69 (assignment_op -> SUBASSIGN .)
    ID              reduce using rule 69 (assignment_op -> SUBASSIGN .)
    INTNUM          reduce using rule 69 (assignment_op -> SUBASSIGN .)
    FLOATNUM        reduce using rule 69 (assignment_op -> SUBASSIGN .)
    STRING          reduce using rule 69 (assignment_op -> SUBASSIGN .)
    (               reduce using rule 69 (assignment_op -> SUBASSIGN .)
    [               reduce using rule 69 (assignment_op -> SUBASSIGN .)


state 71

    (71) assignment_op -> DIVASSIGN .

    -               reduce using rule 71 (assignment_op -> DIVASSIGN .)
    ID              reduce using rule 71 (assignment_op -> DIVASSIGN .)
    INTNUM          reduce using rule 71 (assignment_op -> DIVASSIGN .)
    FLOATNUM        reduce using rule 71 (assignment_op -> DIVASSIGN .)
    STRING          reduce using rule 71 (assignment_op -> DIVASSIGN .)
    (               reduce using rule 71 (assignment_op -> DIVASSIGN .)
    [               reduce using rule 71 (assignment_op -> DIVASSIGN .)


state 72

    (70) assignment_op -> MULASSIGN .

    -               reduce using rule 70 (assignment_op -> MULASSIGN .)
    ID              reduce using rule 70 (assignment_op -> MULASSIGN .)
    INTNUM          reduce using rule 70 (assignment_op -> MULASSIGN .)
    FLOATNUM        reduce using rule 70 (assignment_op -> MULASSIGN .)
    STRING          reduce using rule 70 (assignment_op -> MULASSIGN .)
    (               reduce using rule 70 (assignment_op -> MULASSIGN .)
    [               reduce using rule 70 (assignment_op -> MULASSIGN .)


state 73

    (68) assignment_op -> ADDASSIGN .

    -               reduce using rule 68 (assignment_op -> ADDASSIGN .)
    ID              reduce using rule 68 (assignment_op -> ADDASSIGN .)
    INTNUM          reduce using rule 68 (assignment_op -> ADDASSIGN .)
    FLOATNUM        reduce using rule 68 (assignment_op -> ADDASSIGN .)
    STRING          reduce using rule 68 (assignment_op -> ADDASSIGN .)
    (               reduce using rule 68 (assignment_op -> ADDASSIGN .)
    [               reduce using rule 68 (assignment_op -> ADDASSIGN .)


state 74

    (54) assignment_expr -> unary_expr assignment_op . assignment_expr
    (53) assignment_expr -> . equality_expr
    (54) assignment_expr -> . unary_expr assignment_op assignment_expr
    (51) equality_expr -> . relational_expr
    (52) equality_expr -> . equality_expr eq_op relational_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (49) relational_expr -> . additive_expr
    (50) relational_expr -> . relational_expr rel_op additive_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (44) additive_expr -> . multiplicative_expr
    (45) additive_expr -> . additive_expr + multiplicative_expr
    (46) additive_expr -> . additive_expr - multiplicative_expr
    (47) additive_expr -> . additive_expr DOTADD multiplicative_expr
    (48) additive_expr -> . additive_expr DOTSUB multiplicative_expr
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (39) multiplicative_expr -> . unary_expr
    (40) multiplicative_expr -> . multiplicative_expr * unary_expr
    (41) multiplicative_expr -> . multiplicative_expr / unary_expr
    (42) multiplicative_expr -> . multiplicative_expr DOTMUL unary_expr
    (43) multiplicative_expr -> . multiplicative_expr DOTDIV unary_expr
    (60) matrix -> . [ outer ]

    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    additive_expr                  shift and go to state 45
    matrix                         shift and go to state 11
    unary_expr                     shift and go to state 37
    relational_expr                shift and go to state 41
    postfix_expr                   shift and go to state 12
    equality_expr                  shift and go to state 38
    multiplicative_expr            shift and go to state 39
    primary_expr                   shift and go to state 9
    assignment_expr                shift and go to state 112

state 75

    (67) assignment_op -> = .

    -               reduce using rule 67 (assignment_op -> = .)
    ID              reduce using rule 67 (assignment_op -> = .)
    INTNUM          reduce using rule 67 (assignment_op -> = .)
    FLOATNUM        reduce using rule 67 (assignment_op -> = .)
    STRING          reduce using rule 67 (assignment_op -> = .)
    (               reduce using rule 67 (assignment_op -> = .)
    [               reduce using rule 67 (assignment_op -> = .)


state 76

    (76) eq_op -> EQ .

    -               reduce using rule 76 (eq_op -> EQ .)
    ID              reduce using rule 76 (eq_op -> EQ .)
    INTNUM          reduce using rule 76 (eq_op -> EQ .)
    FLOATNUM        reduce using rule 76 (eq_op -> EQ .)
    STRING          reduce using rule 76 (eq_op -> EQ .)
    (               reduce using rule 76 (eq_op -> EQ .)
    [               reduce using rule 76 (eq_op -> EQ .)


state 77

    (52) equality_expr -> equality_expr eq_op . relational_expr
    (49) relational_expr -> . additive_expr
    (50) relational_expr -> . relational_expr rel_op additive_expr
    (44) additive_expr -> . multiplicative_expr
    (45) additive_expr -> . additive_expr + multiplicative_expr
    (46) additive_expr -> . additive_expr - multiplicative_expr
    (47) additive_expr -> . additive_expr DOTADD multiplicative_expr
    (48) additive_expr -> . additive_expr DOTSUB multiplicative_expr
    (39) multiplicative_expr -> . unary_expr
    (40) multiplicative_expr -> . multiplicative_expr * unary_expr
    (41) multiplicative_expr -> . multiplicative_expr / unary_expr
    (42) multiplicative_expr -> . multiplicative_expr DOTMUL unary_expr
    (43) multiplicative_expr -> . multiplicative_expr DOTDIV unary_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (60) matrix -> . [ outer ]

    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    additive_expr                  shift and go to state 45
    matrix                         shift and go to state 11
    unary_expr                     shift and go to state 50
    relational_expr                shift and go to state 113
    postfix_expr                   shift and go to state 12
    multiplicative_expr            shift and go to state 39
    primary_expr                   shift and go to state 9

state 78

    (77) eq_op -> NE .

    -               reduce using rule 77 (eq_op -> NE .)
    ID              reduce using rule 77 (eq_op -> NE .)
    INTNUM          reduce using rule 77 (eq_op -> NE .)
    FLOATNUM        reduce using rule 77 (eq_op -> NE .)
    STRING          reduce using rule 77 (eq_op -> NE .)
    (               reduce using rule 77 (eq_op -> NE .)
    [               reduce using rule 77 (eq_op -> NE .)


state 79

    (43) multiplicative_expr -> multiplicative_expr DOTDIV . unary_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (60) matrix -> . [ outer ]

    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    matrix                         shift and go to state 11
    postfix_expr                   shift and go to state 12
    unary_expr                     shift and go to state 114
    primary_expr                   shift and go to state 9

state 80

    (40) multiplicative_expr -> multiplicative_expr * . unary_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (60) matrix -> . [ outer ]

    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    matrix                         shift and go to state 11
    postfix_expr                   shift and go to state 12
    unary_expr                     shift and go to state 115
    primary_expr                   shift and go to state 9

state 81

    (41) multiplicative_expr -> multiplicative_expr / . unary_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (60) matrix -> . [ outer ]

    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    matrix                         shift and go to state 11
    postfix_expr                   shift and go to state 12
    unary_expr                     shift and go to state 116
    primary_expr                   shift and go to state 9

state 82

    (42) multiplicative_expr -> multiplicative_expr DOTMUL . unary_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (60) matrix -> . [ outer ]

    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    matrix                         shift and go to state 11
    postfix_expr                   shift and go to state 12
    unary_expr                     shift and go to state 117
    primary_expr                   shift and go to state 9

state 83

    (59) expr -> EYE ( . expr )
    (55) expr -> . assignment_expr
    (56) expr -> . expr , assignment_expr
    (57) expr -> . ZEROS ( expr )
    (58) expr -> . ONES ( expr )
    (59) expr -> . EYE ( expr )
    (53) assignment_expr -> . equality_expr
    (54) assignment_expr -> . unary_expr assignment_op assignment_expr
    (51) equality_expr -> . relational_expr
    (52) equality_expr -> . equality_expr eq_op relational_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (49) relational_expr -> . additive_expr
    (50) relational_expr -> . relational_expr rel_op additive_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (44) additive_expr -> . multiplicative_expr
    (45) additive_expr -> . additive_expr + multiplicative_expr
    (46) additive_expr -> . additive_expr - multiplicative_expr
    (47) additive_expr -> . additive_expr DOTADD multiplicative_expr
    (48) additive_expr -> . additive_expr DOTSUB multiplicative_expr
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (39) multiplicative_expr -> . unary_expr
    (40) multiplicative_expr -> . multiplicative_expr * unary_expr
    (41) multiplicative_expr -> . multiplicative_expr / unary_expr
    (42) multiplicative_expr -> . multiplicative_expr DOTMUL unary_expr
    (43) multiplicative_expr -> . multiplicative_expr DOTDIV unary_expr
    (60) matrix -> . [ outer ]

    ZEROS           shift and go to state 43
    ONES            shift and go to state 42
    EYE             shift and go to state 40
    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    additive_expr                  shift and go to state 45
    matrix                         shift and go to state 11
    unary_expr                     shift and go to state 37
    relational_expr                shift and go to state 41
    expr                           shift and go to state 118
    equality_expr                  shift and go to state 38
    postfix_expr                   shift and go to state 12
    multiplicative_expr            shift and go to state 39
    primary_expr                   shift and go to state 9
    assignment_expr                shift and go to state 46

state 84

    (74) rel_op -> GT .

    -               reduce using rule 74 (rel_op -> GT .)
    ID              reduce using rule 74 (rel_op -> GT .)
    INTNUM          reduce using rule 74 (rel_op -> GT .)
    FLOATNUM        reduce using rule 74 (rel_op -> GT .)
    STRING          reduce using rule 74 (rel_op -> GT .)
    (               reduce using rule 74 (rel_op -> GT .)
    [               reduce using rule 74 (rel_op -> GT .)


state 85

    (75) rel_op -> GE .

    -               reduce using rule 75 (rel_op -> GE .)
    ID              reduce using rule 75 (rel_op -> GE .)
    INTNUM          reduce using rule 75 (rel_op -> GE .)
    FLOATNUM        reduce using rule 75 (rel_op -> GE .)
    STRING          reduce using rule 75 (rel_op -> GE .)
    (               reduce using rule 75 (rel_op -> GE .)
    [               reduce using rule 75 (rel_op -> GE .)


state 86

    (72) rel_op -> LT .

    -               reduce using rule 72 (rel_op -> LT .)
    ID              reduce using rule 72 (rel_op -> LT .)
    INTNUM          reduce using rule 72 (rel_op -> LT .)
    FLOATNUM        reduce using rule 72 (rel_op -> LT .)
    STRING          reduce using rule 72 (rel_op -> LT .)
    (               reduce using rule 72 (rel_op -> LT .)
    [               reduce using rule 72 (rel_op -> LT .)


state 87

    (73) rel_op -> LE .

    -               reduce using rule 73 (rel_op -> LE .)
    ID              reduce using rule 73 (rel_op -> LE .)
    INTNUM          reduce using rule 73 (rel_op -> LE .)
    FLOATNUM        reduce using rule 73 (rel_op -> LE .)
    STRING          reduce using rule 73 (rel_op -> LE .)
    (               reduce using rule 73 (rel_op -> LE .)
    [               reduce using rule 73 (rel_op -> LE .)


state 88

    (50) relational_expr -> relational_expr rel_op . additive_expr
    (44) additive_expr -> . multiplicative_expr
    (45) additive_expr -> . additive_expr + multiplicative_expr
    (46) additive_expr -> . additive_expr - multiplicative_expr
    (47) additive_expr -> . additive_expr DOTADD multiplicative_expr
    (48) additive_expr -> . additive_expr DOTSUB multiplicative_expr
    (39) multiplicative_expr -> . unary_expr
    (40) multiplicative_expr -> . multiplicative_expr * unary_expr
    (41) multiplicative_expr -> . multiplicative_expr / unary_expr
    (42) multiplicative_expr -> . multiplicative_expr DOTMUL unary_expr
    (43) multiplicative_expr -> . multiplicative_expr DOTDIV unary_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (60) matrix -> . [ outer ]

    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    additive_expr                  shift and go to state 119
    matrix                         shift and go to state 11
    postfix_expr                   shift and go to state 12
    unary_expr                     shift and go to state 50
    multiplicative_expr            shift and go to state 39
    primary_expr                   shift and go to state 9

state 89

    (58) expr -> ONES ( . expr )
    (55) expr -> . assignment_expr
    (56) expr -> . expr , assignment_expr
    (57) expr -> . ZEROS ( expr )
    (58) expr -> . ONES ( expr )
    (59) expr -> . EYE ( expr )
    (53) assignment_expr -> . equality_expr
    (54) assignment_expr -> . unary_expr assignment_op assignment_expr
    (51) equality_expr -> . relational_expr
    (52) equality_expr -> . equality_expr eq_op relational_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (49) relational_expr -> . additive_expr
    (50) relational_expr -> . relational_expr rel_op additive_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (44) additive_expr -> . multiplicative_expr
    (45) additive_expr -> . additive_expr + multiplicative_expr
    (46) additive_expr -> . additive_expr - multiplicative_expr
    (47) additive_expr -> . additive_expr DOTADD multiplicative_expr
    (48) additive_expr -> . additive_expr DOTSUB multiplicative_expr
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (39) multiplicative_expr -> . unary_expr
    (40) multiplicative_expr -> . multiplicative_expr * unary_expr
    (41) multiplicative_expr -> . multiplicative_expr / unary_expr
    (42) multiplicative_expr -> . multiplicative_expr DOTMUL unary_expr
    (43) multiplicative_expr -> . multiplicative_expr DOTDIV unary_expr
    (60) matrix -> . [ outer ]

    ZEROS           shift and go to state 43
    ONES            shift and go to state 42
    EYE             shift and go to state 40
    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    additive_expr                  shift and go to state 45
    matrix                         shift and go to state 11
    unary_expr                     shift and go to state 37
    relational_expr                shift and go to state 41
    expr                           shift and go to state 120
    equality_expr                  shift and go to state 38
    postfix_expr                   shift and go to state 12
    multiplicative_expr            shift and go to state 39
    primary_expr                   shift and go to state 9
    assignment_expr                shift and go to state 46

state 90

    (57) expr -> ZEROS ( . expr )
    (55) expr -> . assignment_expr
    (56) expr -> . expr , assignment_expr
    (57) expr -> . ZEROS ( expr )
    (58) expr -> . ONES ( expr )
    (59) expr -> . EYE ( expr )
    (53) assignment_expr -> . equality_expr
    (54) assignment_expr -> . unary_expr assignment_op assignment_expr
    (51) equality_expr -> . relational_expr
    (52) equality_expr -> . equality_expr eq_op relational_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (49) relational_expr -> . additive_expr
    (50) relational_expr -> . relational_expr rel_op additive_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (44) additive_expr -> . multiplicative_expr
    (45) additive_expr -> . additive_expr + multiplicative_expr
    (46) additive_expr -> . additive_expr - multiplicative_expr
    (47) additive_expr -> . additive_expr DOTADD multiplicative_expr
    (48) additive_expr -> . additive_expr DOTSUB multiplicative_expr
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (39) multiplicative_expr -> . unary_expr
    (40) multiplicative_expr -> . multiplicative_expr * unary_expr
    (41) multiplicative_expr -> . multiplicative_expr / unary_expr
    (42) multiplicative_expr -> . multiplicative_expr DOTMUL unary_expr
    (43) multiplicative_expr -> . multiplicative_expr DOTDIV unary_expr
    (60) matrix -> . [ outer ]

    ZEROS           shift and go to state 43
    ONES            shift and go to state 42
    EYE             shift and go to state 40
    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    additive_expr                  shift and go to state 45
    matrix                         shift and go to state 11
    unary_expr                     shift and go to state 37
    relational_expr                shift and go to state 41
    expr                           shift and go to state 121
    equality_expr                  shift and go to state 38
    postfix_expr                   shift and go to state 12
    multiplicative_expr            shift and go to state 39
    primary_expr                   shift and go to state 9
    assignment_expr                shift and go to state 46

state 91

    (21) print_instruction -> PRINT expr ; .

    }               reduce using rule 21 (print_instruction -> PRINT expr ; .)
    IF              reduce using rule 21 (print_instruction -> PRINT expr ; .)
    {               reduce using rule 21 (print_instruction -> PRINT expr ; .)
    PRINT           reduce using rule 21 (print_instruction -> PRINT expr ; .)
    WHILE           reduce using rule 21 (print_instruction -> PRINT expr ; .)
    FOR             reduce using rule 21 (print_instruction -> PRINT expr ; .)
    BREAK           reduce using rule 21 (print_instruction -> PRINT expr ; .)
    CONTINUE        reduce using rule 21 (print_instruction -> PRINT expr ; .)
    RETURN          reduce using rule 21 (print_instruction -> PRINT expr ; .)
    -               reduce using rule 21 (print_instruction -> PRINT expr ; .)
    ID              reduce using rule 21 (print_instruction -> PRINT expr ; .)
    INTNUM          reduce using rule 21 (print_instruction -> PRINT expr ; .)
    FLOATNUM        reduce using rule 21 (print_instruction -> PRINT expr ; .)
    STRING          reduce using rule 21 (print_instruction -> PRINT expr ; .)
    (               reduce using rule 21 (print_instruction -> PRINT expr ; .)
    [               reduce using rule 21 (print_instruction -> PRINT expr ; .)
    $end            reduce using rule 21 (print_instruction -> PRINT expr ; .)
    ELSE            reduce using rule 21 (print_instruction -> PRINT expr ; .)


state 92

    (56) expr -> expr , . assignment_expr
    (53) assignment_expr -> . equality_expr
    (54) assignment_expr -> . unary_expr assignment_op assignment_expr
    (51) equality_expr -> . relational_expr
    (52) equality_expr -> . equality_expr eq_op relational_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (49) relational_expr -> . additive_expr
    (50) relational_expr -> . relational_expr rel_op additive_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (44) additive_expr -> . multiplicative_expr
    (45) additive_expr -> . additive_expr + multiplicative_expr
    (46) additive_expr -> . additive_expr - multiplicative_expr
    (47) additive_expr -> . additive_expr DOTADD multiplicative_expr
    (48) additive_expr -> . additive_expr DOTSUB multiplicative_expr
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (39) multiplicative_expr -> . unary_expr
    (40) multiplicative_expr -> . multiplicative_expr * unary_expr
    (41) multiplicative_expr -> . multiplicative_expr / unary_expr
    (42) multiplicative_expr -> . multiplicative_expr DOTMUL unary_expr
    (43) multiplicative_expr -> . multiplicative_expr DOTDIV unary_expr
    (60) matrix -> . [ outer ]

    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    additive_expr                  shift and go to state 45
    matrix                         shift and go to state 11
    unary_expr                     shift and go to state 37
    relational_expr                shift and go to state 41
    equality_expr                  shift and go to state 38
    postfix_expr                   shift and go to state 12
    multiplicative_expr            shift and go to state 39
    primary_expr                   shift and go to state 9
    assignment_expr                shift and go to state 122

state 93

    (45) additive_expr -> additive_expr + . multiplicative_expr
    (39) multiplicative_expr -> . unary_expr
    (40) multiplicative_expr -> . multiplicative_expr * unary_expr
    (41) multiplicative_expr -> . multiplicative_expr / unary_expr
    (42) multiplicative_expr -> . multiplicative_expr DOTMUL unary_expr
    (43) multiplicative_expr -> . multiplicative_expr DOTDIV unary_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (60) matrix -> . [ outer ]

    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    matrix                         shift and go to state 11
    unary_expr                     shift and go to state 50
    postfix_expr                   shift and go to state 12
    multiplicative_expr            shift and go to state 123
    primary_expr                   shift and go to state 9

state 94

    (46) additive_expr -> additive_expr - . multiplicative_expr
    (39) multiplicative_expr -> . unary_expr
    (40) multiplicative_expr -> . multiplicative_expr * unary_expr
    (41) multiplicative_expr -> . multiplicative_expr / unary_expr
    (42) multiplicative_expr -> . multiplicative_expr DOTMUL unary_expr
    (43) multiplicative_expr -> . multiplicative_expr DOTDIV unary_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (60) matrix -> . [ outer ]

    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    matrix                         shift and go to state 11
    unary_expr                     shift and go to state 50
    postfix_expr                   shift and go to state 12
    multiplicative_expr            shift and go to state 124
    primary_expr                   shift and go to state 9

state 95

    (48) additive_expr -> additive_expr DOTSUB . multiplicative_expr
    (39) multiplicative_expr -> . unary_expr
    (40) multiplicative_expr -> . multiplicative_expr * unary_expr
    (41) multiplicative_expr -> . multiplicative_expr / unary_expr
    (42) multiplicative_expr -> . multiplicative_expr DOTMUL unary_expr
    (43) multiplicative_expr -> . multiplicative_expr DOTDIV unary_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (60) matrix -> . [ outer ]

    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    matrix                         shift and go to state 11
    unary_expr                     shift and go to state 50
    postfix_expr                   shift and go to state 12
    multiplicative_expr            shift and go to state 125
    primary_expr                   shift and go to state 9

state 96

    (47) additive_expr -> additive_expr DOTADD . multiplicative_expr
    (39) multiplicative_expr -> . unary_expr
    (40) multiplicative_expr -> . multiplicative_expr * unary_expr
    (41) multiplicative_expr -> . multiplicative_expr / unary_expr
    (42) multiplicative_expr -> . multiplicative_expr DOTMUL unary_expr
    (43) multiplicative_expr -> . multiplicative_expr DOTDIV unary_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (60) matrix -> . [ outer ]

    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    matrix                         shift and go to state 11
    unary_expr                     shift and go to state 50
    postfix_expr                   shift and go to state 12
    multiplicative_expr            shift and go to state 126
    primary_expr                   shift and go to state 9

state 97

    (35) postfix_expr -> postfix_expr [ expr . ]
    (56) expr -> expr . , assignment_expr

    ]               shift and go to state 127
    ,               shift and go to state 92


state 98

    (33) primary_expr -> ( expr ) .

    [               reduce using rule 33 (primary_expr -> ( expr ) .)
    SINGLE_QUOTE    reduce using rule 33 (primary_expr -> ( expr ) .)
    =               reduce using rule 33 (primary_expr -> ( expr ) .)
    ADDASSIGN       reduce using rule 33 (primary_expr -> ( expr ) .)
    SUBASSIGN       reduce using rule 33 (primary_expr -> ( expr ) .)
    MULASSIGN       reduce using rule 33 (primary_expr -> ( expr ) .)
    DIVASSIGN       reduce using rule 33 (primary_expr -> ( expr ) .)
    *               reduce using rule 33 (primary_expr -> ( expr ) .)
    /               reduce using rule 33 (primary_expr -> ( expr ) .)
    DOTMUL          reduce using rule 33 (primary_expr -> ( expr ) .)
    DOTDIV          reduce using rule 33 (primary_expr -> ( expr ) .)
    +               reduce using rule 33 (primary_expr -> ( expr ) .)
    -               reduce using rule 33 (primary_expr -> ( expr ) .)
    DOTADD          reduce using rule 33 (primary_expr -> ( expr ) .)
    DOTSUB          reduce using rule 33 (primary_expr -> ( expr ) .)
    LT              reduce using rule 33 (primary_expr -> ( expr ) .)
    LE              reduce using rule 33 (primary_expr -> ( expr ) .)
    GT              reduce using rule 33 (primary_expr -> ( expr ) .)
    GE              reduce using rule 33 (primary_expr -> ( expr ) .)
    EQ              reduce using rule 33 (primary_expr -> ( expr ) .)
    NE              reduce using rule 33 (primary_expr -> ( expr ) .)
    ;               reduce using rule 33 (primary_expr -> ( expr ) .)
    ,               reduce using rule 33 (primary_expr -> ( expr ) .)
    )               reduce using rule 33 (primary_expr -> ( expr ) .)
    ]               reduce using rule 33 (primary_expr -> ( expr ) .)
    :               reduce using rule 33 (primary_expr -> ( expr ) .)
    IF              reduce using rule 33 (primary_expr -> ( expr ) .)
    {               reduce using rule 33 (primary_expr -> ( expr ) .)
    PRINT           reduce using rule 33 (primary_expr -> ( expr ) .)
    WHILE           reduce using rule 33 (primary_expr -> ( expr ) .)
    FOR             reduce using rule 33 (primary_expr -> ( expr ) .)
    BREAK           reduce using rule 33 (primary_expr -> ( expr ) .)
    CONTINUE        reduce using rule 33 (primary_expr -> ( expr ) .)
    RETURN          reduce using rule 33 (primary_expr -> ( expr ) .)
    ID              reduce using rule 33 (primary_expr -> ( expr ) .)
    INTNUM          reduce using rule 33 (primary_expr -> ( expr ) .)
    FLOATNUM        reduce using rule 33 (primary_expr -> ( expr ) .)
    STRING          reduce using rule 33 (primary_expr -> ( expr ) .)
    (               reduce using rule 33 (primary_expr -> ( expr ) .)


state 99

    (24) iteration_instruction -> FOR iterator_assignment instruction .

    IF              reduce using rule 24 (iteration_instruction -> FOR iterator_assignment instruction .)
    {               reduce using rule 24 (iteration_instruction -> FOR iterator_assignment instruction .)
    PRINT           reduce using rule 24 (iteration_instruction -> FOR iterator_assignment instruction .)
    WHILE           reduce using rule 24 (iteration_instruction -> FOR iterator_assignment instruction .)
    FOR             reduce using rule 24 (iteration_instruction -> FOR iterator_assignment instruction .)
    BREAK           reduce using rule 24 (iteration_instruction -> FOR iterator_assignment instruction .)
    CONTINUE        reduce using rule 24 (iteration_instruction -> FOR iterator_assignment instruction .)
    RETURN          reduce using rule 24 (iteration_instruction -> FOR iterator_assignment instruction .)
    -               reduce using rule 24 (iteration_instruction -> FOR iterator_assignment instruction .)
    ID              reduce using rule 24 (iteration_instruction -> FOR iterator_assignment instruction .)
    INTNUM          reduce using rule 24 (iteration_instruction -> FOR iterator_assignment instruction .)
    FLOATNUM        reduce using rule 24 (iteration_instruction -> FOR iterator_assignment instruction .)
    STRING          reduce using rule 24 (iteration_instruction -> FOR iterator_assignment instruction .)
    (               reduce using rule 24 (iteration_instruction -> FOR iterator_assignment instruction .)
    [               reduce using rule 24 (iteration_instruction -> FOR iterator_assignment instruction .)
    $end            reduce using rule 24 (iteration_instruction -> FOR iterator_assignment instruction .)
    }               reduce using rule 24 (iteration_instruction -> FOR iterator_assignment instruction .)
    ELSE            reduce using rule 24 (iteration_instruction -> FOR iterator_assignment instruction .)


state 100

    (66) iterator_assignment -> ID = . expr : expr
    (55) expr -> . assignment_expr
    (56) expr -> . expr , assignment_expr
    (57) expr -> . ZEROS ( expr )
    (58) expr -> . ONES ( expr )
    (59) expr -> . EYE ( expr )
    (53) assignment_expr -> . equality_expr
    (54) assignment_expr -> . unary_expr assignment_op assignment_expr
    (51) equality_expr -> . relational_expr
    (52) equality_expr -> . equality_expr eq_op relational_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (49) relational_expr -> . additive_expr
    (50) relational_expr -> . relational_expr rel_op additive_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (44) additive_expr -> . multiplicative_expr
    (45) additive_expr -> . additive_expr + multiplicative_expr
    (46) additive_expr -> . additive_expr - multiplicative_expr
    (47) additive_expr -> . additive_expr DOTADD multiplicative_expr
    (48) additive_expr -> . additive_expr DOTSUB multiplicative_expr
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (39) multiplicative_expr -> . unary_expr
    (40) multiplicative_expr -> . multiplicative_expr * unary_expr
    (41) multiplicative_expr -> . multiplicative_expr / unary_expr
    (42) multiplicative_expr -> . multiplicative_expr DOTMUL unary_expr
    (43) multiplicative_expr -> . multiplicative_expr DOTDIV unary_expr
    (60) matrix -> . [ outer ]

    ZEROS           shift and go to state 43
    ONES            shift and go to state 42
    EYE             shift and go to state 40
    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    additive_expr                  shift and go to state 45
    matrix                         shift and go to state 11
    unary_expr                     shift and go to state 37
    relational_expr                shift and go to state 41
    expr                           shift and go to state 128
    equality_expr                  shift and go to state 38
    postfix_expr                   shift and go to state 12
    multiplicative_expr            shift and go to state 39
    primary_expr                   shift and go to state 9
    assignment_expr                shift and go to state 46

state 101

    (60) matrix -> [ outer ] .

    [               reduce using rule 60 (matrix -> [ outer ] .)
    SINGLE_QUOTE    reduce using rule 60 (matrix -> [ outer ] .)
    =               reduce using rule 60 (matrix -> [ outer ] .)
    ADDASSIGN       reduce using rule 60 (matrix -> [ outer ] .)
    SUBASSIGN       reduce using rule 60 (matrix -> [ outer ] .)
    MULASSIGN       reduce using rule 60 (matrix -> [ outer ] .)
    DIVASSIGN       reduce using rule 60 (matrix -> [ outer ] .)
    *               reduce using rule 60 (matrix -> [ outer ] .)
    /               reduce using rule 60 (matrix -> [ outer ] .)
    DOTMUL          reduce using rule 60 (matrix -> [ outer ] .)
    DOTDIV          reduce using rule 60 (matrix -> [ outer ] .)
    +               reduce using rule 60 (matrix -> [ outer ] .)
    -               reduce using rule 60 (matrix -> [ outer ] .)
    DOTADD          reduce using rule 60 (matrix -> [ outer ] .)
    DOTSUB          reduce using rule 60 (matrix -> [ outer ] .)
    LT              reduce using rule 60 (matrix -> [ outer ] .)
    LE              reduce using rule 60 (matrix -> [ outer ] .)
    GT              reduce using rule 60 (matrix -> [ outer ] .)
    GE              reduce using rule 60 (matrix -> [ outer ] .)
    EQ              reduce using rule 60 (matrix -> [ outer ] .)
    NE              reduce using rule 60 (matrix -> [ outer ] .)
    )               reduce using rule 60 (matrix -> [ outer ] .)
    ,               reduce using rule 60 (matrix -> [ outer ] .)
    ;               reduce using rule 60 (matrix -> [ outer ] .)
    ]               reduce using rule 60 (matrix -> [ outer ] .)
    :               reduce using rule 60 (matrix -> [ outer ] .)
    IF              reduce using rule 60 (matrix -> [ outer ] .)
    {               reduce using rule 60 (matrix -> [ outer ] .)
    PRINT           reduce using rule 60 (matrix -> [ outer ] .)
    WHILE           reduce using rule 60 (matrix -> [ outer ] .)
    FOR             reduce using rule 60 (matrix -> [ outer ] .)
    BREAK           reduce using rule 60 (matrix -> [ outer ] .)
    CONTINUE        reduce using rule 60 (matrix -> [ outer ] .)
    RETURN          reduce using rule 60 (matrix -> [ outer ] .)
    ID              reduce using rule 60 (matrix -> [ outer ] .)
    INTNUM          reduce using rule 60 (matrix -> [ outer ] .)
    FLOATNUM        reduce using rule 60 (matrix -> [ outer ] .)
    STRING          reduce using rule 60 (matrix -> [ outer ] .)
    (               reduce using rule 60 (matrix -> [ outer ] .)


state 102

    (61) outer -> outer ; . inner
    (63) inner -> . inner , elem
    (64) inner -> . elem
    (65) elem -> . expr
    (55) expr -> . assignment_expr
    (56) expr -> . expr , assignment_expr
    (57) expr -> . ZEROS ( expr )
    (58) expr -> . ONES ( expr )
    (59) expr -> . EYE ( expr )
    (53) assignment_expr -> . equality_expr
    (54) assignment_expr -> . unary_expr assignment_op assignment_expr
    (51) equality_expr -> . relational_expr
    (52) equality_expr -> . equality_expr eq_op relational_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (49) relational_expr -> . additive_expr
    (50) relational_expr -> . relational_expr rel_op additive_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (44) additive_expr -> . multiplicative_expr
    (45) additive_expr -> . additive_expr + multiplicative_expr
    (46) additive_expr -> . additive_expr - multiplicative_expr
    (47) additive_expr -> . additive_expr DOTADD multiplicative_expr
    (48) additive_expr -> . additive_expr DOTSUB multiplicative_expr
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (39) multiplicative_expr -> . unary_expr
    (40) multiplicative_expr -> . multiplicative_expr * unary_expr
    (41) multiplicative_expr -> . multiplicative_expr / unary_expr
    (42) multiplicative_expr -> . multiplicative_expr DOTMUL unary_expr
    (43) multiplicative_expr -> . multiplicative_expr DOTDIV unary_expr
    (60) matrix -> . [ outer ]

    ZEROS           shift and go to state 43
    ONES            shift and go to state 42
    EYE             shift and go to state 40
    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    additive_expr                  shift and go to state 45
    matrix                         shift and go to state 11
    unary_expr                     shift and go to state 37
    relational_expr                shift and go to state 41
    expr                           shift and go to state 57
    equality_expr                  shift and go to state 38
    elem                           shift and go to state 58
    postfix_expr                   shift and go to state 12
    multiplicative_expr            shift and go to state 39
    primary_expr                   shift and go to state 9
    inner                          shift and go to state 129
    assignment_expr                shift and go to state 46

state 103

    (63) inner -> inner , . elem
    (65) elem -> . expr
    (55) expr -> . assignment_expr
    (56) expr -> . expr , assignment_expr
    (57) expr -> . ZEROS ( expr )
    (58) expr -> . ONES ( expr )
    (59) expr -> . EYE ( expr )
    (53) assignment_expr -> . equality_expr
    (54) assignment_expr -> . unary_expr assignment_op assignment_expr
    (51) equality_expr -> . relational_expr
    (52) equality_expr -> . equality_expr eq_op relational_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (49) relational_expr -> . additive_expr
    (50) relational_expr -> . relational_expr rel_op additive_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (44) additive_expr -> . multiplicative_expr
    (45) additive_expr -> . additive_expr + multiplicative_expr
    (46) additive_expr -> . additive_expr - multiplicative_expr
    (47) additive_expr -> . additive_expr DOTADD multiplicative_expr
    (48) additive_expr -> . additive_expr DOTSUB multiplicative_expr
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (39) multiplicative_expr -> . unary_expr
    (40) multiplicative_expr -> . multiplicative_expr * unary_expr
    (41) multiplicative_expr -> . multiplicative_expr / unary_expr
    (42) multiplicative_expr -> . multiplicative_expr DOTMUL unary_expr
    (43) multiplicative_expr -> . multiplicative_expr DOTDIV unary_expr
    (60) matrix -> . [ outer ]

    ZEROS           shift and go to state 43
    ONES            shift and go to state 42
    EYE             shift and go to state 40
    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    additive_expr                  shift and go to state 45
    matrix                         shift and go to state 11
    unary_expr                     shift and go to state 37
    relational_expr                shift and go to state 41
    expr                           shift and go to state 57
    equality_expr                  shift and go to state 38
    elem                           shift and go to state 130
    postfix_expr                   shift and go to state 12
    multiplicative_expr            shift and go to state 39
    primary_expr                   shift and go to state 9
    assignment_expr                shift and go to state 46

state 104

    (17) conditional_instruction -> IF ( expr . ) instruction
    (18) conditional_instruction -> IF ( expr . ) instruction ELSE instruction
    (56) expr -> expr . , assignment_expr

    )               shift and go to state 131
    ,               shift and go to state 92


state 105

    (20) compound_instruction -> { instructions } .

    }               reduce using rule 20 (compound_instruction -> { instructions } .)
    IF              reduce using rule 20 (compound_instruction -> { instructions } .)
    {               reduce using rule 20 (compound_instruction -> { instructions } .)
    PRINT           reduce using rule 20 (compound_instruction -> { instructions } .)
    WHILE           reduce using rule 20 (compound_instruction -> { instructions } .)
    FOR             reduce using rule 20 (compound_instruction -> { instructions } .)
    BREAK           reduce using rule 20 (compound_instruction -> { instructions } .)
    CONTINUE        reduce using rule 20 (compound_instruction -> { instructions } .)
    RETURN          reduce using rule 20 (compound_instruction -> { instructions } .)
    -               reduce using rule 20 (compound_instruction -> { instructions } .)
    ID              reduce using rule 20 (compound_instruction -> { instructions } .)
    INTNUM          reduce using rule 20 (compound_instruction -> { instructions } .)
    FLOATNUM        reduce using rule 20 (compound_instruction -> { instructions } .)
    STRING          reduce using rule 20 (compound_instruction -> { instructions } .)
    (               reduce using rule 20 (compound_instruction -> { instructions } .)
    [               reduce using rule 20 (compound_instruction -> { instructions } .)
    $end            reduce using rule 20 (compound_instruction -> { instructions } .)
    ELSE            reduce using rule 20 (compound_instruction -> { instructions } .)


state 106

    (14) assignment_instruction -> unary_expr SUBASSIGN expr ; .

    IF              reduce using rule 14 (assignment_instruction -> unary_expr SUBASSIGN expr ; .)
    {               reduce using rule 14 (assignment_instruction -> unary_expr SUBASSIGN expr ; .)
    PRINT           reduce using rule 14 (assignment_instruction -> unary_expr SUBASSIGN expr ; .)
    WHILE           reduce using rule 14 (assignment_instruction -> unary_expr SUBASSIGN expr ; .)
    FOR             reduce using rule 14 (assignment_instruction -> unary_expr SUBASSIGN expr ; .)
    BREAK           reduce using rule 14 (assignment_instruction -> unary_expr SUBASSIGN expr ; .)
    CONTINUE        reduce using rule 14 (assignment_instruction -> unary_expr SUBASSIGN expr ; .)
    RETURN          reduce using rule 14 (assignment_instruction -> unary_expr SUBASSIGN expr ; .)
    -               reduce using rule 14 (assignment_instruction -> unary_expr SUBASSIGN expr ; .)
    ID              reduce using rule 14 (assignment_instruction -> unary_expr SUBASSIGN expr ; .)
    INTNUM          reduce using rule 14 (assignment_instruction -> unary_expr SUBASSIGN expr ; .)
    FLOATNUM        reduce using rule 14 (assignment_instruction -> unary_expr SUBASSIGN expr ; .)
    STRING          reduce using rule 14 (assignment_instruction -> unary_expr SUBASSIGN expr ; .)
    (               reduce using rule 14 (assignment_instruction -> unary_expr SUBASSIGN expr ; .)
    [               reduce using rule 14 (assignment_instruction -> unary_expr SUBASSIGN expr ; .)
    $end            reduce using rule 14 (assignment_instruction -> unary_expr SUBASSIGN expr ; .)
    }               reduce using rule 14 (assignment_instruction -> unary_expr SUBASSIGN expr ; .)
    ELSE            reduce using rule 14 (assignment_instruction -> unary_expr SUBASSIGN expr ; .)


state 107

    (16) assignment_instruction -> unary_expr DIVASSIGN expr ; .

    IF              reduce using rule 16 (assignment_instruction -> unary_expr DIVASSIGN expr ; .)
    {               reduce using rule 16 (assignment_instruction -> unary_expr DIVASSIGN expr ; .)
    PRINT           reduce using rule 16 (assignment_instruction -> unary_expr DIVASSIGN expr ; .)
    WHILE           reduce using rule 16 (assignment_instruction -> unary_expr DIVASSIGN expr ; .)
    FOR             reduce using rule 16 (assignment_instruction -> unary_expr DIVASSIGN expr ; .)
    BREAK           reduce using rule 16 (assignment_instruction -> unary_expr DIVASSIGN expr ; .)
    CONTINUE        reduce using rule 16 (assignment_instruction -> unary_expr DIVASSIGN expr ; .)
    RETURN          reduce using rule 16 (assignment_instruction -> unary_expr DIVASSIGN expr ; .)
    -               reduce using rule 16 (assignment_instruction -> unary_expr DIVASSIGN expr ; .)
    ID              reduce using rule 16 (assignment_instruction -> unary_expr DIVASSIGN expr ; .)
    INTNUM          reduce using rule 16 (assignment_instruction -> unary_expr DIVASSIGN expr ; .)
    FLOATNUM        reduce using rule 16 (assignment_instruction -> unary_expr DIVASSIGN expr ; .)
    STRING          reduce using rule 16 (assignment_instruction -> unary_expr DIVASSIGN expr ; .)
    (               reduce using rule 16 (assignment_instruction -> unary_expr DIVASSIGN expr ; .)
    [               reduce using rule 16 (assignment_instruction -> unary_expr DIVASSIGN expr ; .)
    $end            reduce using rule 16 (assignment_instruction -> unary_expr DIVASSIGN expr ; .)
    }               reduce using rule 16 (assignment_instruction -> unary_expr DIVASSIGN expr ; .)
    ELSE            reduce using rule 16 (assignment_instruction -> unary_expr DIVASSIGN expr ; .)


state 108

    (15) assignment_instruction -> unary_expr MULASSIGN expr ; .

    IF              reduce using rule 15 (assignment_instruction -> unary_expr MULASSIGN expr ; .)
    {               reduce using rule 15 (assignment_instruction -> unary_expr MULASSIGN expr ; .)
    PRINT           reduce using rule 15 (assignment_instruction -> unary_expr MULASSIGN expr ; .)
    WHILE           reduce using rule 15 (assignment_instruction -> unary_expr MULASSIGN expr ; .)
    FOR             reduce using rule 15 (assignment_instruction -> unary_expr MULASSIGN expr ; .)
    BREAK           reduce using rule 15 (assignment_instruction -> unary_expr MULASSIGN expr ; .)
    CONTINUE        reduce using rule 15 (assignment_instruction -> unary_expr MULASSIGN expr ; .)
    RETURN          reduce using rule 15 (assignment_instruction -> unary_expr MULASSIGN expr ; .)
    -               reduce using rule 15 (assignment_instruction -> unary_expr MULASSIGN expr ; .)
    ID              reduce using rule 15 (assignment_instruction -> unary_expr MULASSIGN expr ; .)
    INTNUM          reduce using rule 15 (assignment_instruction -> unary_expr MULASSIGN expr ; .)
    FLOATNUM        reduce using rule 15 (assignment_instruction -> unary_expr MULASSIGN expr ; .)
    STRING          reduce using rule 15 (assignment_instruction -> unary_expr MULASSIGN expr ; .)
    (               reduce using rule 15 (assignment_instruction -> unary_expr MULASSIGN expr ; .)
    [               reduce using rule 15 (assignment_instruction -> unary_expr MULASSIGN expr ; .)
    $end            reduce using rule 15 (assignment_instruction -> unary_expr MULASSIGN expr ; .)
    }               reduce using rule 15 (assignment_instruction -> unary_expr MULASSIGN expr ; .)
    ELSE            reduce using rule 15 (assignment_instruction -> unary_expr MULASSIGN expr ; .)


state 109

    (13) assignment_instruction -> unary_expr ADDASSIGN expr ; .

    IF              reduce using rule 13 (assignment_instruction -> unary_expr ADDASSIGN expr ; .)
    {               reduce using rule 13 (assignment_instruction -> unary_expr ADDASSIGN expr ; .)
    PRINT           reduce using rule 13 (assignment_instruction -> unary_expr ADDASSIGN expr ; .)
    WHILE           reduce using rule 13 (assignment_instruction -> unary_expr ADDASSIGN expr ; .)
    FOR             reduce using rule 13 (assignment_instruction -> unary_expr ADDASSIGN expr ; .)
    BREAK           reduce using rule 13 (assignment_instruction -> unary_expr ADDASSIGN expr ; .)
    CONTINUE        reduce using rule 13 (assignment_instruction -> unary_expr ADDASSIGN expr ; .)
    RETURN          reduce using rule 13 (assignment_instruction -> unary_expr ADDASSIGN expr ; .)
    -               reduce using rule 13 (assignment_instruction -> unary_expr ADDASSIGN expr ; .)
    ID              reduce using rule 13 (assignment_instruction -> unary_expr ADDASSIGN expr ; .)
    INTNUM          reduce using rule 13 (assignment_instruction -> unary_expr ADDASSIGN expr ; .)
    FLOATNUM        reduce using rule 13 (assignment_instruction -> unary_expr ADDASSIGN expr ; .)
    STRING          reduce using rule 13 (assignment_instruction -> unary_expr ADDASSIGN expr ; .)
    (               reduce using rule 13 (assignment_instruction -> unary_expr ADDASSIGN expr ; .)
    [               reduce using rule 13 (assignment_instruction -> unary_expr ADDASSIGN expr ; .)
    $end            reduce using rule 13 (assignment_instruction -> unary_expr ADDASSIGN expr ; .)
    }               reduce using rule 13 (assignment_instruction -> unary_expr ADDASSIGN expr ; .)
    ELSE            reduce using rule 13 (assignment_instruction -> unary_expr ADDASSIGN expr ; .)


state 110

    (12) assignment_instruction -> unary_expr = expr ; .

    IF              reduce using rule 12 (assignment_instruction -> unary_expr = expr ; .)
    {               reduce using rule 12 (assignment_instruction -> unary_expr = expr ; .)
    PRINT           reduce using rule 12 (assignment_instruction -> unary_expr = expr ; .)
    WHILE           reduce using rule 12 (assignment_instruction -> unary_expr = expr ; .)
    FOR             reduce using rule 12 (assignment_instruction -> unary_expr = expr ; .)
    BREAK           reduce using rule 12 (assignment_instruction -> unary_expr = expr ; .)
    CONTINUE        reduce using rule 12 (assignment_instruction -> unary_expr = expr ; .)
    RETURN          reduce using rule 12 (assignment_instruction -> unary_expr = expr ; .)
    -               reduce using rule 12 (assignment_instruction -> unary_expr = expr ; .)
    ID              reduce using rule 12 (assignment_instruction -> unary_expr = expr ; .)
    INTNUM          reduce using rule 12 (assignment_instruction -> unary_expr = expr ; .)
    FLOATNUM        reduce using rule 12 (assignment_instruction -> unary_expr = expr ; .)
    STRING          reduce using rule 12 (assignment_instruction -> unary_expr = expr ; .)
    (               reduce using rule 12 (assignment_instruction -> unary_expr = expr ; .)
    [               reduce using rule 12 (assignment_instruction -> unary_expr = expr ; .)
    $end            reduce using rule 12 (assignment_instruction -> unary_expr = expr ; .)
    }               reduce using rule 12 (assignment_instruction -> unary_expr = expr ; .)
    ELSE            reduce using rule 12 (assignment_instruction -> unary_expr = expr ; .)


state 111

    (22) iteration_instruction -> WHILE ( expr ) . instruction
    (23) iteration_instruction -> WHILE ( expr ) . { instruction
    (6) instruction -> . assignment_instruction
    (7) instruction -> . conditional_instruction
    (8) instruction -> . compound_instruction
    (9) instruction -> . print_instruction
    (10) instruction -> . iteration_instruction
    (11) instruction -> . jump_instruction
    (12) assignment_instruction -> . unary_expr = expr ;
    (13) assignment_instruction -> . unary_expr ADDASSIGN expr ;
    (14) assignment_instruction -> . unary_expr SUBASSIGN expr ;
    (15) assignment_instruction -> . unary_expr MULASSIGN expr ;
    (16) assignment_instruction -> . unary_expr DIVASSIGN expr ;
    (17) conditional_instruction -> . IF ( expr ) instruction
    (18) conditional_instruction -> . IF ( expr ) instruction ELSE instruction
    (19) compound_instruction -> . { }
    (20) compound_instruction -> . { instructions }
    (21) print_instruction -> . PRINT expr ;
    (22) iteration_instruction -> . WHILE ( expr ) instruction
    (23) iteration_instruction -> . WHILE ( expr ) { instruction
    (24) iteration_instruction -> . FOR iterator_assignment instruction
    (25) jump_instruction -> . BREAK ;
    (26) jump_instruction -> . CONTINUE ;
    (27) jump_instruction -> . RETURN ;
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (60) matrix -> . [ outer ]

    {               shift and go to state 133
    IF              shift and go to state 23
    PRINT           shift and go to state 6
    WHILE           shift and go to state 5
    FOR             shift and go to state 19
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    RETURN          shift and go to state 1
    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    iteration_instruction          shift and go to state 18
    unary_expr                     shift and go to state 2
    compound_instruction           shift and go to state 24
    instruction                    shift and go to state 132
    assignment_instruction         shift and go to state 3
    postfix_expr                   shift and go to state 12
    primary_expr                   shift and go to state 9
    jump_instruction               shift and go to state 16
    print_instruction              shift and go to state 28
    conditional_instruction        shift and go to state 7
    matrix                         shift and go to state 11

state 112

    (54) assignment_expr -> unary_expr assignment_op assignment_expr .

    ;               reduce using rule 54 (assignment_expr -> unary_expr assignment_op assignment_expr .)
    ,               reduce using rule 54 (assignment_expr -> unary_expr assignment_op assignment_expr .)
    )               reduce using rule 54 (assignment_expr -> unary_expr assignment_op assignment_expr .)
    ]               reduce using rule 54 (assignment_expr -> unary_expr assignment_op assignment_expr .)
    :               reduce using rule 54 (assignment_expr -> unary_expr assignment_op assignment_expr .)
    IF              reduce using rule 54 (assignment_expr -> unary_expr assignment_op assignment_expr .)
    {               reduce using rule 54 (assignment_expr -> unary_expr assignment_op assignment_expr .)
    PRINT           reduce using rule 54 (assignment_expr -> unary_expr assignment_op assignment_expr .)
    WHILE           reduce using rule 54 (assignment_expr -> unary_expr assignment_op assignment_expr .)
    FOR             reduce using rule 54 (assignment_expr -> unary_expr assignment_op assignment_expr .)
    BREAK           reduce using rule 54 (assignment_expr -> unary_expr assignment_op assignment_expr .)
    CONTINUE        reduce using rule 54 (assignment_expr -> unary_expr assignment_op assignment_expr .)
    RETURN          reduce using rule 54 (assignment_expr -> unary_expr assignment_op assignment_expr .)
    -               reduce using rule 54 (assignment_expr -> unary_expr assignment_op assignment_expr .)
    ID              reduce using rule 54 (assignment_expr -> unary_expr assignment_op assignment_expr .)
    INTNUM          reduce using rule 54 (assignment_expr -> unary_expr assignment_op assignment_expr .)
    FLOATNUM        reduce using rule 54 (assignment_expr -> unary_expr assignment_op assignment_expr .)
    STRING          reduce using rule 54 (assignment_expr -> unary_expr assignment_op assignment_expr .)
    (               reduce using rule 54 (assignment_expr -> unary_expr assignment_op assignment_expr .)
    [               reduce using rule 54 (assignment_expr -> unary_expr assignment_op assignment_expr .)


state 113

    (52) equality_expr -> equality_expr eq_op relational_expr .
    (50) relational_expr -> relational_expr . rel_op additive_expr
    (72) rel_op -> . LT
    (73) rel_op -> . LE
    (74) rel_op -> . GT
    (75) rel_op -> . GE

    EQ              reduce using rule 52 (equality_expr -> equality_expr eq_op relational_expr .)
    NE              reduce using rule 52 (equality_expr -> equality_expr eq_op relational_expr .)
    )               reduce using rule 52 (equality_expr -> equality_expr eq_op relational_expr .)
    ,               reduce using rule 52 (equality_expr -> equality_expr eq_op relational_expr .)
    ;               reduce using rule 52 (equality_expr -> equality_expr eq_op relational_expr .)
    ]               reduce using rule 52 (equality_expr -> equality_expr eq_op relational_expr .)
    :               reduce using rule 52 (equality_expr -> equality_expr eq_op relational_expr .)
    IF              reduce using rule 52 (equality_expr -> equality_expr eq_op relational_expr .)
    {               reduce using rule 52 (equality_expr -> equality_expr eq_op relational_expr .)
    PRINT           reduce using rule 52 (equality_expr -> equality_expr eq_op relational_expr .)
    WHILE           reduce using rule 52 (equality_expr -> equality_expr eq_op relational_expr .)
    FOR             reduce using rule 52 (equality_expr -> equality_expr eq_op relational_expr .)
    BREAK           reduce using rule 52 (equality_expr -> equality_expr eq_op relational_expr .)
    CONTINUE        reduce using rule 52 (equality_expr -> equality_expr eq_op relational_expr .)
    RETURN          reduce using rule 52 (equality_expr -> equality_expr eq_op relational_expr .)
    -               reduce using rule 52 (equality_expr -> equality_expr eq_op relational_expr .)
    ID              reduce using rule 52 (equality_expr -> equality_expr eq_op relational_expr .)
    INTNUM          reduce using rule 52 (equality_expr -> equality_expr eq_op relational_expr .)
    FLOATNUM        reduce using rule 52 (equality_expr -> equality_expr eq_op relational_expr .)
    STRING          reduce using rule 52 (equality_expr -> equality_expr eq_op relational_expr .)
    (               reduce using rule 52 (equality_expr -> equality_expr eq_op relational_expr .)
    [               reduce using rule 52 (equality_expr -> equality_expr eq_op relational_expr .)
    LT              shift and go to state 86
    LE              shift and go to state 87
    GT              shift and go to state 84
    GE              shift and go to state 85

    rel_op                         shift and go to state 88

state 114

    (43) multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .

    *               reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    /               reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    DOTMUL          reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    DOTDIV          reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    +               reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    -               reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    DOTADD          reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    DOTSUB          reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    LT              reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    LE              reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    GT              reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    GE              reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    EQ              reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    NE              reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    ,               reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    ]               reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    ;               reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    )               reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    :               reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    IF              reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    {               reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    PRINT           reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    WHILE           reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    FOR             reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    BREAK           reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    CONTINUE        reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    RETURN          reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    ID              reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    INTNUM          reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    FLOATNUM        reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    STRING          reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    (               reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    [               reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    =               reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    ADDASSIGN       reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    SUBASSIGN       reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    MULASSIGN       reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)
    DIVASSIGN       reduce using rule 43 (multiplicative_expr -> multiplicative_expr DOTDIV unary_expr .)


state 115

    (40) multiplicative_expr -> multiplicative_expr * unary_expr .

    *               reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    /               reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    DOTMUL          reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    DOTDIV          reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    +               reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    -               reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    DOTADD          reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    DOTSUB          reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    LT              reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    LE              reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    GT              reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    GE              reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    EQ              reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    NE              reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    ,               reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    ]               reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    ;               reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    )               reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    :               reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    IF              reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    {               reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    PRINT           reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    WHILE           reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    FOR             reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    BREAK           reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    CONTINUE        reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    RETURN          reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    ID              reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    INTNUM          reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    FLOATNUM        reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    STRING          reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    (               reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    [               reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    =               reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    ADDASSIGN       reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    SUBASSIGN       reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    MULASSIGN       reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)
    DIVASSIGN       reduce using rule 40 (multiplicative_expr -> multiplicative_expr * unary_expr .)


state 116

    (41) multiplicative_expr -> multiplicative_expr / unary_expr .

    *               reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    /               reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    DOTMUL          reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    DOTDIV          reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    +               reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    -               reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    DOTADD          reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    DOTSUB          reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    LT              reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    LE              reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    GT              reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    GE              reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    EQ              reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    NE              reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    ,               reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    ]               reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    ;               reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    )               reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    :               reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    IF              reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    {               reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    PRINT           reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    WHILE           reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    FOR             reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    BREAK           reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    CONTINUE        reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    RETURN          reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    ID              reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    INTNUM          reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    FLOATNUM        reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    STRING          reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    (               reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    [               reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    =               reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    ADDASSIGN       reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    SUBASSIGN       reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    MULASSIGN       reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)
    DIVASSIGN       reduce using rule 41 (multiplicative_expr -> multiplicative_expr / unary_expr .)


state 117

    (42) multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .

    *               reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    /               reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    DOTMUL          reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    DOTDIV          reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    +               reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    -               reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    DOTADD          reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    DOTSUB          reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    LT              reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    LE              reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    GT              reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    GE              reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    EQ              reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    NE              reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    ,               reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    ]               reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    ;               reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    )               reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    :               reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    IF              reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    {               reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    PRINT           reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    WHILE           reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    FOR             reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    BREAK           reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    CONTINUE        reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    RETURN          reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    ID              reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    INTNUM          reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    FLOATNUM        reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    STRING          reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    (               reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    [               reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    =               reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    ADDASSIGN       reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    SUBASSIGN       reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    MULASSIGN       reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)
    DIVASSIGN       reduce using rule 42 (multiplicative_expr -> multiplicative_expr DOTMUL unary_expr .)


state 118

    (59) expr -> EYE ( expr . )
    (56) expr -> expr . , assignment_expr

    )               shift and go to state 134
    ,               shift and go to state 92


state 119

    (50) relational_expr -> relational_expr rel_op additive_expr .
    (45) additive_expr -> additive_expr . + multiplicative_expr
    (46) additive_expr -> additive_expr . - multiplicative_expr
    (47) additive_expr -> additive_expr . DOTADD multiplicative_expr
    (48) additive_expr -> additive_expr . DOTSUB multiplicative_expr

  ! shift/reduce conflict for - resolved as shift
    LT              reduce using rule 50 (relational_expr -> relational_expr rel_op additive_expr .)
    LE              reduce using rule 50 (relational_expr -> relational_expr rel_op additive_expr .)
    GT              reduce using rule 50 (relational_expr -> relational_expr rel_op additive_expr .)
    GE              reduce using rule 50 (relational_expr -> relational_expr rel_op additive_expr .)
    EQ              reduce using rule 50 (relational_expr -> relational_expr rel_op additive_expr .)
    NE              reduce using rule 50 (relational_expr -> relational_expr rel_op additive_expr .)
    )               reduce using rule 50 (relational_expr -> relational_expr rel_op additive_expr .)
    ,               reduce using rule 50 (relational_expr -> relational_expr rel_op additive_expr .)
    ]               reduce using rule 50 (relational_expr -> relational_expr rel_op additive_expr .)
    ;               reduce using rule 50 (relational_expr -> relational_expr rel_op additive_expr .)
    :               reduce using rule 50 (relational_expr -> relational_expr rel_op additive_expr .)
    IF              reduce using rule 50 (relational_expr -> relational_expr rel_op additive_expr .)
    {               reduce using rule 50 (relational_expr -> relational_expr rel_op additive_expr .)
    PRINT           reduce using rule 50 (relational_expr -> relational_expr rel_op additive_expr .)
    WHILE           reduce using rule 50 (relational_expr -> relational_expr rel_op additive_expr .)
    FOR             reduce using rule 50 (relational_expr -> relational_expr rel_op additive_expr .)
    BREAK           reduce using rule 50 (relational_expr -> relational_expr rel_op additive_expr .)
    CONTINUE        reduce using rule 50 (relational_expr -> relational_expr rel_op additive_expr .)
    RETURN          reduce using rule 50 (relational_expr -> relational_expr rel_op additive_expr .)
    ID              reduce using rule 50 (relational_expr -> relational_expr rel_op additive_expr .)
    INTNUM          reduce using rule 50 (relational_expr -> relational_expr rel_op additive_expr .)
    FLOATNUM        reduce using rule 50 (relational_expr -> relational_expr rel_op additive_expr .)
    STRING          reduce using rule 50 (relational_expr -> relational_expr rel_op additive_expr .)
    (               reduce using rule 50 (relational_expr -> relational_expr rel_op additive_expr .)
    [               reduce using rule 50 (relational_expr -> relational_expr rel_op additive_expr .)
    +               shift and go to state 93
    -               shift and go to state 94
    DOTADD          shift and go to state 96
    DOTSUB          shift and go to state 95

  ! -               [ reduce using rule 50 (relational_expr -> relational_expr rel_op additive_expr .) ]


state 120

    (58) expr -> ONES ( expr . )
    (56) expr -> expr . , assignment_expr

    )               shift and go to state 135
    ,               shift and go to state 92


state 121

    (57) expr -> ZEROS ( expr . )
    (56) expr -> expr . , assignment_expr

    )               shift and go to state 136
    ,               shift and go to state 92


state 122

    (56) expr -> expr , assignment_expr .

    )               reduce using rule 56 (expr -> expr , assignment_expr .)
    ,               reduce using rule 56 (expr -> expr , assignment_expr .)
    ;               reduce using rule 56 (expr -> expr , assignment_expr .)
    :               reduce using rule 56 (expr -> expr , assignment_expr .)
    ]               reduce using rule 56 (expr -> expr , assignment_expr .)
    IF              reduce using rule 56 (expr -> expr , assignment_expr .)
    {               reduce using rule 56 (expr -> expr , assignment_expr .)
    PRINT           reduce using rule 56 (expr -> expr , assignment_expr .)
    WHILE           reduce using rule 56 (expr -> expr , assignment_expr .)
    FOR             reduce using rule 56 (expr -> expr , assignment_expr .)
    BREAK           reduce using rule 56 (expr -> expr , assignment_expr .)
    CONTINUE        reduce using rule 56 (expr -> expr , assignment_expr .)
    RETURN          reduce using rule 56 (expr -> expr , assignment_expr .)
    -               reduce using rule 56 (expr -> expr , assignment_expr .)
    ID              reduce using rule 56 (expr -> expr , assignment_expr .)
    INTNUM          reduce using rule 56 (expr -> expr , assignment_expr .)
    FLOATNUM        reduce using rule 56 (expr -> expr , assignment_expr .)
    STRING          reduce using rule 56 (expr -> expr , assignment_expr .)
    (               reduce using rule 56 (expr -> expr , assignment_expr .)
    [               reduce using rule 56 (expr -> expr , assignment_expr .)


state 123

    (45) additive_expr -> additive_expr + multiplicative_expr .
    (40) multiplicative_expr -> multiplicative_expr . * unary_expr
    (41) multiplicative_expr -> multiplicative_expr . / unary_expr
    (42) multiplicative_expr -> multiplicative_expr . DOTMUL unary_expr
    (43) multiplicative_expr -> multiplicative_expr . DOTDIV unary_expr

    +               reduce using rule 45 (additive_expr -> additive_expr + multiplicative_expr .)
    -               reduce using rule 45 (additive_expr -> additive_expr + multiplicative_expr .)
    DOTADD          reduce using rule 45 (additive_expr -> additive_expr + multiplicative_expr .)
    DOTSUB          reduce using rule 45 (additive_expr -> additive_expr + multiplicative_expr .)
    LT              reduce using rule 45 (additive_expr -> additive_expr + multiplicative_expr .)
    LE              reduce using rule 45 (additive_expr -> additive_expr + multiplicative_expr .)
    GT              reduce using rule 45 (additive_expr -> additive_expr + multiplicative_expr .)
    GE              reduce using rule 45 (additive_expr -> additive_expr + multiplicative_expr .)
    EQ              reduce using rule 45 (additive_expr -> additive_expr + multiplicative_expr .)
    NE              reduce using rule 45 (additive_expr -> additive_expr + multiplicative_expr .)
    )               reduce using rule 45 (additive_expr -> additive_expr + multiplicative_expr .)
    ,               reduce using rule 45 (additive_expr -> additive_expr + multiplicative_expr .)
    ;               reduce using rule 45 (additive_expr -> additive_expr + multiplicative_expr .)
    ]               reduce using rule 45 (additive_expr -> additive_expr + multiplicative_expr .)
    :               reduce using rule 45 (additive_expr -> additive_expr + multiplicative_expr .)
    IF              reduce using rule 45 (additive_expr -> additive_expr + multiplicative_expr .)
    {               reduce using rule 45 (additive_expr -> additive_expr + multiplicative_expr .)
    PRINT           reduce using rule 45 (additive_expr -> additive_expr + multiplicative_expr .)
    WHILE           reduce using rule 45 (additive_expr -> additive_expr + multiplicative_expr .)
    FOR             reduce using rule 45 (additive_expr -> additive_expr + multiplicative_expr .)
    BREAK           reduce using rule 45 (additive_expr -> additive_expr + multiplicative_expr .)
    CONTINUE        reduce using rule 45 (additive_expr -> additive_expr + multiplicative_expr .)
    RETURN          reduce using rule 45 (additive_expr -> additive_expr + multiplicative_expr .)
    ID              reduce using rule 45 (additive_expr -> additive_expr + multiplicative_expr .)
    INTNUM          reduce using rule 45 (additive_expr -> additive_expr + multiplicative_expr .)
    FLOATNUM        reduce using rule 45 (additive_expr -> additive_expr + multiplicative_expr .)
    STRING          reduce using rule 45 (additive_expr -> additive_expr + multiplicative_expr .)
    (               reduce using rule 45 (additive_expr -> additive_expr + multiplicative_expr .)
    [               reduce using rule 45 (additive_expr -> additive_expr + multiplicative_expr .)
    *               shift and go to state 80
    /               shift and go to state 81
    DOTMUL          shift and go to state 82
    DOTDIV          shift and go to state 79


state 124

    (46) additive_expr -> additive_expr - multiplicative_expr .
    (40) multiplicative_expr -> multiplicative_expr . * unary_expr
    (41) multiplicative_expr -> multiplicative_expr . / unary_expr
    (42) multiplicative_expr -> multiplicative_expr . DOTMUL unary_expr
    (43) multiplicative_expr -> multiplicative_expr . DOTDIV unary_expr

    +               reduce using rule 46 (additive_expr -> additive_expr - multiplicative_expr .)
    -               reduce using rule 46 (additive_expr -> additive_expr - multiplicative_expr .)
    DOTADD          reduce using rule 46 (additive_expr -> additive_expr - multiplicative_expr .)
    DOTSUB          reduce using rule 46 (additive_expr -> additive_expr - multiplicative_expr .)
    LT              reduce using rule 46 (additive_expr -> additive_expr - multiplicative_expr .)
    LE              reduce using rule 46 (additive_expr -> additive_expr - multiplicative_expr .)
    GT              reduce using rule 46 (additive_expr -> additive_expr - multiplicative_expr .)
    GE              reduce using rule 46 (additive_expr -> additive_expr - multiplicative_expr .)
    EQ              reduce using rule 46 (additive_expr -> additive_expr - multiplicative_expr .)
    NE              reduce using rule 46 (additive_expr -> additive_expr - multiplicative_expr .)
    )               reduce using rule 46 (additive_expr -> additive_expr - multiplicative_expr .)
    ,               reduce using rule 46 (additive_expr -> additive_expr - multiplicative_expr .)
    ;               reduce using rule 46 (additive_expr -> additive_expr - multiplicative_expr .)
    ]               reduce using rule 46 (additive_expr -> additive_expr - multiplicative_expr .)
    :               reduce using rule 46 (additive_expr -> additive_expr - multiplicative_expr .)
    IF              reduce using rule 46 (additive_expr -> additive_expr - multiplicative_expr .)
    {               reduce using rule 46 (additive_expr -> additive_expr - multiplicative_expr .)
    PRINT           reduce using rule 46 (additive_expr -> additive_expr - multiplicative_expr .)
    WHILE           reduce using rule 46 (additive_expr -> additive_expr - multiplicative_expr .)
    FOR             reduce using rule 46 (additive_expr -> additive_expr - multiplicative_expr .)
    BREAK           reduce using rule 46 (additive_expr -> additive_expr - multiplicative_expr .)
    CONTINUE        reduce using rule 46 (additive_expr -> additive_expr - multiplicative_expr .)
    RETURN          reduce using rule 46 (additive_expr -> additive_expr - multiplicative_expr .)
    ID              reduce using rule 46 (additive_expr -> additive_expr - multiplicative_expr .)
    INTNUM          reduce using rule 46 (additive_expr -> additive_expr - multiplicative_expr .)
    FLOATNUM        reduce using rule 46 (additive_expr -> additive_expr - multiplicative_expr .)
    STRING          reduce using rule 46 (additive_expr -> additive_expr - multiplicative_expr .)
    (               reduce using rule 46 (additive_expr -> additive_expr - multiplicative_expr .)
    [               reduce using rule 46 (additive_expr -> additive_expr - multiplicative_expr .)
    *               shift and go to state 80
    /               shift and go to state 81
    DOTMUL          shift and go to state 82
    DOTDIV          shift and go to state 79


state 125

    (48) additive_expr -> additive_expr DOTSUB multiplicative_expr .
    (40) multiplicative_expr -> multiplicative_expr . * unary_expr
    (41) multiplicative_expr -> multiplicative_expr . / unary_expr
    (42) multiplicative_expr -> multiplicative_expr . DOTMUL unary_expr
    (43) multiplicative_expr -> multiplicative_expr . DOTDIV unary_expr

    +               reduce using rule 48 (additive_expr -> additive_expr DOTSUB multiplicative_expr .)
    -               reduce using rule 48 (additive_expr -> additive_expr DOTSUB multiplicative_expr .)
    DOTADD          reduce using rule 48 (additive_expr -> additive_expr DOTSUB multiplicative_expr .)
    DOTSUB          reduce using rule 48 (additive_expr -> additive_expr DOTSUB multiplicative_expr .)
    LT              reduce using rule 48 (additive_expr -> additive_expr DOTSUB multiplicative_expr .)
    LE              reduce using rule 48 (additive_expr -> additive_expr DOTSUB multiplicative_expr .)
    GT              reduce using rule 48 (additive_expr -> additive_expr DOTSUB multiplicative_expr .)
    GE              reduce using rule 48 (additive_expr -> additive_expr DOTSUB multiplicative_expr .)
    EQ              reduce using rule 48 (additive_expr -> additive_expr DOTSUB multiplicative_expr .)
    NE              reduce using rule 48 (additive_expr -> additive_expr DOTSUB multiplicative_expr .)
    )               reduce using rule 48 (additive_expr -> additive_expr DOTSUB multiplicative_expr .)
    ,               reduce using rule 48 (additive_expr -> additive_expr DOTSUB multiplicative_expr .)
    ;               reduce using rule 48 (additive_expr -> additive_expr DOTSUB multiplicative_expr .)
    ]               reduce using rule 48 (additive_expr -> additive_expr DOTSUB multiplicative_expr .)
    :               reduce using rule 48 (additive_expr -> additive_expr DOTSUB multiplicative_expr .)
    IF              reduce using rule 48 (additive_expr -> additive_expr DOTSUB multiplicative_expr .)
    {               reduce using rule 48 (additive_expr -> additive_expr DOTSUB multiplicative_expr .)
    PRINT           reduce using rule 48 (additive_expr -> additive_expr DOTSUB multiplicative_expr .)
    WHILE           reduce using rule 48 (additive_expr -> additive_expr DOTSUB multiplicative_expr .)
    FOR             reduce using rule 48 (additive_expr -> additive_expr DOTSUB multiplicative_expr .)
    BREAK           reduce using rule 48 (additive_expr -> additive_expr DOTSUB multiplicative_expr .)
    CONTINUE        reduce using rule 48 (additive_expr -> additive_expr DOTSUB multiplicative_expr .)
    RETURN          reduce using rule 48 (additive_expr -> additive_expr DOTSUB multiplicative_expr .)
    ID              reduce using rule 48 (additive_expr -> additive_expr DOTSUB multiplicative_expr .)
    INTNUM          reduce using rule 48 (additive_expr -> additive_expr DOTSUB multiplicative_expr .)
    FLOATNUM        reduce using rule 48 (additive_expr -> additive_expr DOTSUB multiplicative_expr .)
    STRING          reduce using rule 48 (additive_expr -> additive_expr DOTSUB multiplicative_expr .)
    (               reduce using rule 48 (additive_expr -> additive_expr DOTSUB multiplicative_expr .)
    [               reduce using rule 48 (additive_expr -> additive_expr DOTSUB multiplicative_expr .)
    *               shift and go to state 80
    /               shift and go to state 81
    DOTMUL          shift and go to state 82
    DOTDIV          shift and go to state 79


state 126

    (47) additive_expr -> additive_expr DOTADD multiplicative_expr .
    (40) multiplicative_expr -> multiplicative_expr . * unary_expr
    (41) multiplicative_expr -> multiplicative_expr . / unary_expr
    (42) multiplicative_expr -> multiplicative_expr . DOTMUL unary_expr
    (43) multiplicative_expr -> multiplicative_expr . DOTDIV unary_expr

    +               reduce using rule 47 (additive_expr -> additive_expr DOTADD multiplicative_expr .)
    -               reduce using rule 47 (additive_expr -> additive_expr DOTADD multiplicative_expr .)
    DOTADD          reduce using rule 47 (additive_expr -> additive_expr DOTADD multiplicative_expr .)
    DOTSUB          reduce using rule 47 (additive_expr -> additive_expr DOTADD multiplicative_expr .)
    LT              reduce using rule 47 (additive_expr -> additive_expr DOTADD multiplicative_expr .)
    LE              reduce using rule 47 (additive_expr -> additive_expr DOTADD multiplicative_expr .)
    GT              reduce using rule 47 (additive_expr -> additive_expr DOTADD multiplicative_expr .)
    GE              reduce using rule 47 (additive_expr -> additive_expr DOTADD multiplicative_expr .)
    EQ              reduce using rule 47 (additive_expr -> additive_expr DOTADD multiplicative_expr .)
    NE              reduce using rule 47 (additive_expr -> additive_expr DOTADD multiplicative_expr .)
    )               reduce using rule 47 (additive_expr -> additive_expr DOTADD multiplicative_expr .)
    ,               reduce using rule 47 (additive_expr -> additive_expr DOTADD multiplicative_expr .)
    ;               reduce using rule 47 (additive_expr -> additive_expr DOTADD multiplicative_expr .)
    ]               reduce using rule 47 (additive_expr -> additive_expr DOTADD multiplicative_expr .)
    :               reduce using rule 47 (additive_expr -> additive_expr DOTADD multiplicative_expr .)
    IF              reduce using rule 47 (additive_expr -> additive_expr DOTADD multiplicative_expr .)
    {               reduce using rule 47 (additive_expr -> additive_expr DOTADD multiplicative_expr .)
    PRINT           reduce using rule 47 (additive_expr -> additive_expr DOTADD multiplicative_expr .)
    WHILE           reduce using rule 47 (additive_expr -> additive_expr DOTADD multiplicative_expr .)
    FOR             reduce using rule 47 (additive_expr -> additive_expr DOTADD multiplicative_expr .)
    BREAK           reduce using rule 47 (additive_expr -> additive_expr DOTADD multiplicative_expr .)
    CONTINUE        reduce using rule 47 (additive_expr -> additive_expr DOTADD multiplicative_expr .)
    RETURN          reduce using rule 47 (additive_expr -> additive_expr DOTADD multiplicative_expr .)
    ID              reduce using rule 47 (additive_expr -> additive_expr DOTADD multiplicative_expr .)
    INTNUM          reduce using rule 47 (additive_expr -> additive_expr DOTADD multiplicative_expr .)
    FLOATNUM        reduce using rule 47 (additive_expr -> additive_expr DOTADD multiplicative_expr .)
    STRING          reduce using rule 47 (additive_expr -> additive_expr DOTADD multiplicative_expr .)
    (               reduce using rule 47 (additive_expr -> additive_expr DOTADD multiplicative_expr .)
    [               reduce using rule 47 (additive_expr -> additive_expr DOTADD multiplicative_expr .)
    *               shift and go to state 80
    /               shift and go to state 81
    DOTMUL          shift and go to state 82
    DOTDIV          shift and go to state 79


state 127

    (35) postfix_expr -> postfix_expr [ expr ] .

    [               reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    SINGLE_QUOTE    reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    *               reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    /               reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    DOTMUL          reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    DOTDIV          reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    +               reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    -               reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    DOTADD          reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    DOTSUB          reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    LT              reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    LE              reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    GT              reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    GE              reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    EQ              reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    NE              reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    ;               reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    ,               reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    )               reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    ]               reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    :               reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    IF              reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    {               reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    PRINT           reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    WHILE           reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    FOR             reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    BREAK           reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    CONTINUE        reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    RETURN          reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    ID              reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    INTNUM          reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    FLOATNUM        reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    STRING          reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    (               reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    =               reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    ADDASSIGN       reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    SUBASSIGN       reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    MULASSIGN       reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)
    DIVASSIGN       reduce using rule 35 (postfix_expr -> postfix_expr [ expr ] .)


state 128

    (66) iterator_assignment -> ID = expr . : expr
    (56) expr -> expr . , assignment_expr

    :               shift and go to state 137
    ,               shift and go to state 92


state 129

    (61) outer -> outer ; inner .
    (63) inner -> inner . , elem

    ]               reduce using rule 61 (outer -> outer ; inner .)
    ;               reduce using rule 61 (outer -> outer ; inner .)
    ,               shift and go to state 103


state 130

    (63) inner -> inner , elem .

    ,               reduce using rule 63 (inner -> inner , elem .)
    ]               reduce using rule 63 (inner -> inner , elem .)
    ;               reduce using rule 63 (inner -> inner , elem .)


state 131

    (17) conditional_instruction -> IF ( expr ) . instruction
    (18) conditional_instruction -> IF ( expr ) . instruction ELSE instruction
    (6) instruction -> . assignment_instruction
    (7) instruction -> . conditional_instruction
    (8) instruction -> . compound_instruction
    (9) instruction -> . print_instruction
    (10) instruction -> . iteration_instruction
    (11) instruction -> . jump_instruction
    (12) assignment_instruction -> . unary_expr = expr ;
    (13) assignment_instruction -> . unary_expr ADDASSIGN expr ;
    (14) assignment_instruction -> . unary_expr SUBASSIGN expr ;
    (15) assignment_instruction -> . unary_expr MULASSIGN expr ;
    (16) assignment_instruction -> . unary_expr DIVASSIGN expr ;
    (17) conditional_instruction -> . IF ( expr ) instruction
    (18) conditional_instruction -> . IF ( expr ) instruction ELSE instruction
    (19) compound_instruction -> . { }
    (20) compound_instruction -> . { instructions }
    (21) print_instruction -> . PRINT expr ;
    (22) iteration_instruction -> . WHILE ( expr ) instruction
    (23) iteration_instruction -> . WHILE ( expr ) { instruction
    (24) iteration_instruction -> . FOR iterator_assignment instruction
    (25) jump_instruction -> . BREAK ;
    (26) jump_instruction -> . CONTINUE ;
    (27) jump_instruction -> . RETURN ;
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (60) matrix -> . [ outer ]

    IF              shift and go to state 23
    {               shift and go to state 29
    PRINT           shift and go to state 6
    WHILE           shift and go to state 5
    FOR             shift and go to state 19
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    RETURN          shift and go to state 1
    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    iteration_instruction          shift and go to state 18
    unary_expr                     shift and go to state 2
    compound_instruction           shift and go to state 24
    instruction                    shift and go to state 138
    assignment_instruction         shift and go to state 3
    postfix_expr                   shift and go to state 12
    primary_expr                   shift and go to state 9
    jump_instruction               shift and go to state 16
    print_instruction              shift and go to state 28
    conditional_instruction        shift and go to state 7
    matrix                         shift and go to state 11

state 132

    (22) iteration_instruction -> WHILE ( expr ) instruction .

    IF              reduce using rule 22 (iteration_instruction -> WHILE ( expr ) instruction .)
    {               reduce using rule 22 (iteration_instruction -> WHILE ( expr ) instruction .)
    PRINT           reduce using rule 22 (iteration_instruction -> WHILE ( expr ) instruction .)
    WHILE           reduce using rule 22 (iteration_instruction -> WHILE ( expr ) instruction .)
    FOR             reduce using rule 22 (iteration_instruction -> WHILE ( expr ) instruction .)
    BREAK           reduce using rule 22 (iteration_instruction -> WHILE ( expr ) instruction .)
    CONTINUE        reduce using rule 22 (iteration_instruction -> WHILE ( expr ) instruction .)
    RETURN          reduce using rule 22 (iteration_instruction -> WHILE ( expr ) instruction .)
    -               reduce using rule 22 (iteration_instruction -> WHILE ( expr ) instruction .)
    ID              reduce using rule 22 (iteration_instruction -> WHILE ( expr ) instruction .)
    INTNUM          reduce using rule 22 (iteration_instruction -> WHILE ( expr ) instruction .)
    FLOATNUM        reduce using rule 22 (iteration_instruction -> WHILE ( expr ) instruction .)
    STRING          reduce using rule 22 (iteration_instruction -> WHILE ( expr ) instruction .)
    (               reduce using rule 22 (iteration_instruction -> WHILE ( expr ) instruction .)
    [               reduce using rule 22 (iteration_instruction -> WHILE ( expr ) instruction .)
    $end            reduce using rule 22 (iteration_instruction -> WHILE ( expr ) instruction .)
    }               reduce using rule 22 (iteration_instruction -> WHILE ( expr ) instruction .)
    ELSE            reduce using rule 22 (iteration_instruction -> WHILE ( expr ) instruction .)


state 133

    (23) iteration_instruction -> WHILE ( expr ) { . instruction
    (19) compound_instruction -> { . }
    (20) compound_instruction -> { . instructions }
    (6) instruction -> . assignment_instruction
    (7) instruction -> . conditional_instruction
    (8) instruction -> . compound_instruction
    (9) instruction -> . print_instruction
    (10) instruction -> . iteration_instruction
    (11) instruction -> . jump_instruction
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (12) assignment_instruction -> . unary_expr = expr ;
    (13) assignment_instruction -> . unary_expr ADDASSIGN expr ;
    (14) assignment_instruction -> . unary_expr SUBASSIGN expr ;
    (15) assignment_instruction -> . unary_expr MULASSIGN expr ;
    (16) assignment_instruction -> . unary_expr DIVASSIGN expr ;
    (17) conditional_instruction -> . IF ( expr ) instruction
    (18) conditional_instruction -> . IF ( expr ) instruction ELSE instruction
    (19) compound_instruction -> . { }
    (20) compound_instruction -> . { instructions }
    (21) print_instruction -> . PRINT expr ;
    (22) iteration_instruction -> . WHILE ( expr ) instruction
    (23) iteration_instruction -> . WHILE ( expr ) { instruction
    (24) iteration_instruction -> . FOR iterator_assignment instruction
    (25) jump_instruction -> . BREAK ;
    (26) jump_instruction -> . CONTINUE ;
    (27) jump_instruction -> . RETURN ;
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (60) matrix -> . [ outer ]

    }               shift and go to state 63
    IF              shift and go to state 23
    {               shift and go to state 29
    PRINT           shift and go to state 6
    WHILE           shift and go to state 5
    FOR             shift and go to state 19
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    RETURN          shift and go to state 1
    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    iteration_instruction          shift and go to state 18
    unary_expr                     shift and go to state 2
    compound_instruction           shift and go to state 24
    instruction                    shift and go to state 139
    assignment_instruction         shift and go to state 3
    postfix_expr                   shift and go to state 12
    primary_expr                   shift and go to state 9
    jump_instruction               shift and go to state 16
    print_instruction              shift and go to state 28
    conditional_instruction        shift and go to state 7
    matrix                         shift and go to state 11
    instructions                   shift and go to state 62

state 134

    (59) expr -> EYE ( expr ) .

    )               reduce using rule 59 (expr -> EYE ( expr ) .)
    ,               reduce using rule 59 (expr -> EYE ( expr ) .)
    ;               reduce using rule 59 (expr -> EYE ( expr ) .)
    :               reduce using rule 59 (expr -> EYE ( expr ) .)
    ]               reduce using rule 59 (expr -> EYE ( expr ) .)
    IF              reduce using rule 59 (expr -> EYE ( expr ) .)
    {               reduce using rule 59 (expr -> EYE ( expr ) .)
    PRINT           reduce using rule 59 (expr -> EYE ( expr ) .)
    WHILE           reduce using rule 59 (expr -> EYE ( expr ) .)
    FOR             reduce using rule 59 (expr -> EYE ( expr ) .)
    BREAK           reduce using rule 59 (expr -> EYE ( expr ) .)
    CONTINUE        reduce using rule 59 (expr -> EYE ( expr ) .)
    RETURN          reduce using rule 59 (expr -> EYE ( expr ) .)
    -               reduce using rule 59 (expr -> EYE ( expr ) .)
    ID              reduce using rule 59 (expr -> EYE ( expr ) .)
    INTNUM          reduce using rule 59 (expr -> EYE ( expr ) .)
    FLOATNUM        reduce using rule 59 (expr -> EYE ( expr ) .)
    STRING          reduce using rule 59 (expr -> EYE ( expr ) .)
    (               reduce using rule 59 (expr -> EYE ( expr ) .)
    [               reduce using rule 59 (expr -> EYE ( expr ) .)


state 135

    (58) expr -> ONES ( expr ) .

    )               reduce using rule 58 (expr -> ONES ( expr ) .)
    ,               reduce using rule 58 (expr -> ONES ( expr ) .)
    ;               reduce using rule 58 (expr -> ONES ( expr ) .)
    :               reduce using rule 58 (expr -> ONES ( expr ) .)
    ]               reduce using rule 58 (expr -> ONES ( expr ) .)
    IF              reduce using rule 58 (expr -> ONES ( expr ) .)
    {               reduce using rule 58 (expr -> ONES ( expr ) .)
    PRINT           reduce using rule 58 (expr -> ONES ( expr ) .)
    WHILE           reduce using rule 58 (expr -> ONES ( expr ) .)
    FOR             reduce using rule 58 (expr -> ONES ( expr ) .)
    BREAK           reduce using rule 58 (expr -> ONES ( expr ) .)
    CONTINUE        reduce using rule 58 (expr -> ONES ( expr ) .)
    RETURN          reduce using rule 58 (expr -> ONES ( expr ) .)
    -               reduce using rule 58 (expr -> ONES ( expr ) .)
    ID              reduce using rule 58 (expr -> ONES ( expr ) .)
    INTNUM          reduce using rule 58 (expr -> ONES ( expr ) .)
    FLOATNUM        reduce using rule 58 (expr -> ONES ( expr ) .)
    STRING          reduce using rule 58 (expr -> ONES ( expr ) .)
    (               reduce using rule 58 (expr -> ONES ( expr ) .)
    [               reduce using rule 58 (expr -> ONES ( expr ) .)


state 136

    (57) expr -> ZEROS ( expr ) .

    )               reduce using rule 57 (expr -> ZEROS ( expr ) .)
    ,               reduce using rule 57 (expr -> ZEROS ( expr ) .)
    ;               reduce using rule 57 (expr -> ZEROS ( expr ) .)
    :               reduce using rule 57 (expr -> ZEROS ( expr ) .)
    ]               reduce using rule 57 (expr -> ZEROS ( expr ) .)
    IF              reduce using rule 57 (expr -> ZEROS ( expr ) .)
    {               reduce using rule 57 (expr -> ZEROS ( expr ) .)
    PRINT           reduce using rule 57 (expr -> ZEROS ( expr ) .)
    WHILE           reduce using rule 57 (expr -> ZEROS ( expr ) .)
    FOR             reduce using rule 57 (expr -> ZEROS ( expr ) .)
    BREAK           reduce using rule 57 (expr -> ZEROS ( expr ) .)
    CONTINUE        reduce using rule 57 (expr -> ZEROS ( expr ) .)
    RETURN          reduce using rule 57 (expr -> ZEROS ( expr ) .)
    -               reduce using rule 57 (expr -> ZEROS ( expr ) .)
    ID              reduce using rule 57 (expr -> ZEROS ( expr ) .)
    INTNUM          reduce using rule 57 (expr -> ZEROS ( expr ) .)
    FLOATNUM        reduce using rule 57 (expr -> ZEROS ( expr ) .)
    STRING          reduce using rule 57 (expr -> ZEROS ( expr ) .)
    (               reduce using rule 57 (expr -> ZEROS ( expr ) .)
    [               reduce using rule 57 (expr -> ZEROS ( expr ) .)


state 137

    (66) iterator_assignment -> ID = expr : . expr
    (55) expr -> . assignment_expr
    (56) expr -> . expr , assignment_expr
    (57) expr -> . ZEROS ( expr )
    (58) expr -> . ONES ( expr )
    (59) expr -> . EYE ( expr )
    (53) assignment_expr -> . equality_expr
    (54) assignment_expr -> . unary_expr assignment_op assignment_expr
    (51) equality_expr -> . relational_expr
    (52) equality_expr -> . equality_expr eq_op relational_expr
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (49) relational_expr -> . additive_expr
    (50) relational_expr -> . relational_expr rel_op additive_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (44) additive_expr -> . multiplicative_expr
    (45) additive_expr -> . additive_expr + multiplicative_expr
    (46) additive_expr -> . additive_expr - multiplicative_expr
    (47) additive_expr -> . additive_expr DOTADD multiplicative_expr
    (48) additive_expr -> . additive_expr DOTSUB multiplicative_expr
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (39) multiplicative_expr -> . unary_expr
    (40) multiplicative_expr -> . multiplicative_expr * unary_expr
    (41) multiplicative_expr -> . multiplicative_expr / unary_expr
    (42) multiplicative_expr -> . multiplicative_expr DOTMUL unary_expr
    (43) multiplicative_expr -> . multiplicative_expr DOTDIV unary_expr
    (60) matrix -> . [ outer ]

    ZEROS           shift and go to state 43
    ONES            shift and go to state 42
    EYE             shift and go to state 40
    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    additive_expr                  shift and go to state 45
    matrix                         shift and go to state 11
    unary_expr                     shift and go to state 37
    relational_expr                shift and go to state 41
    expr                           shift and go to state 140
    equality_expr                  shift and go to state 38
    postfix_expr                   shift and go to state 12
    multiplicative_expr            shift and go to state 39
    primary_expr                   shift and go to state 9
    assignment_expr                shift and go to state 46

state 138

    (17) conditional_instruction -> IF ( expr ) instruction .
    (18) conditional_instruction -> IF ( expr ) instruction . ELSE instruction

    }               reduce using rule 17 (conditional_instruction -> IF ( expr ) instruction .)
    IF              reduce using rule 17 (conditional_instruction -> IF ( expr ) instruction .)
    {               reduce using rule 17 (conditional_instruction -> IF ( expr ) instruction .)
    PRINT           reduce using rule 17 (conditional_instruction -> IF ( expr ) instruction .)
    WHILE           reduce using rule 17 (conditional_instruction -> IF ( expr ) instruction .)
    FOR             reduce using rule 17 (conditional_instruction -> IF ( expr ) instruction .)
    BREAK           reduce using rule 17 (conditional_instruction -> IF ( expr ) instruction .)
    CONTINUE        reduce using rule 17 (conditional_instruction -> IF ( expr ) instruction .)
    RETURN          reduce using rule 17 (conditional_instruction -> IF ( expr ) instruction .)
    -               reduce using rule 17 (conditional_instruction -> IF ( expr ) instruction .)
    ID              reduce using rule 17 (conditional_instruction -> IF ( expr ) instruction .)
    INTNUM          reduce using rule 17 (conditional_instruction -> IF ( expr ) instruction .)
    FLOATNUM        reduce using rule 17 (conditional_instruction -> IF ( expr ) instruction .)
    STRING          reduce using rule 17 (conditional_instruction -> IF ( expr ) instruction .)
    (               reduce using rule 17 (conditional_instruction -> IF ( expr ) instruction .)
    [               reduce using rule 17 (conditional_instruction -> IF ( expr ) instruction .)
    $end            reduce using rule 17 (conditional_instruction -> IF ( expr ) instruction .)
    ELSE            shift and go to state 141

  ! ELSE            [ reduce using rule 17 (conditional_instruction -> IF ( expr ) instruction .) ]


state 139

    (23) iteration_instruction -> WHILE ( expr ) { instruction .
    (5) instructions -> instruction .

  ! reduce/reduce conflict for } resolved using rule 5 (instructions -> instruction .)
  ! reduce/reduce conflict for IF resolved using rule 5 (instructions -> instruction .)
  ! reduce/reduce conflict for { resolved using rule 5 (instructions -> instruction .)
  ! reduce/reduce conflict for PRINT resolved using rule 5 (instructions -> instruction .)
  ! reduce/reduce conflict for WHILE resolved using rule 5 (instructions -> instruction .)
  ! reduce/reduce conflict for FOR resolved using rule 5 (instructions -> instruction .)
  ! reduce/reduce conflict for BREAK resolved using rule 5 (instructions -> instruction .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 5 (instructions -> instruction .)
  ! reduce/reduce conflict for RETURN resolved using rule 5 (instructions -> instruction .)
  ! reduce/reduce conflict for - resolved using rule 5 (instructions -> instruction .)
  ! reduce/reduce conflict for ID resolved using rule 5 (instructions -> instruction .)
  ! reduce/reduce conflict for INTNUM resolved using rule 5 (instructions -> instruction .)
  ! reduce/reduce conflict for FLOATNUM resolved using rule 5 (instructions -> instruction .)
  ! reduce/reduce conflict for STRING resolved using rule 5 (instructions -> instruction .)
  ! reduce/reduce conflict for ( resolved using rule 5 (instructions -> instruction .)
  ! reduce/reduce conflict for [ resolved using rule 5 (instructions -> instruction .)
    $end            reduce using rule 23 (iteration_instruction -> WHILE ( expr ) { instruction .)
    ELSE            reduce using rule 23 (iteration_instruction -> WHILE ( expr ) { instruction .)
    }               reduce using rule 5 (instructions -> instruction .)
    IF              reduce using rule 5 (instructions -> instruction .)
    {               reduce using rule 5 (instructions -> instruction .)
    PRINT           reduce using rule 5 (instructions -> instruction .)
    WHILE           reduce using rule 5 (instructions -> instruction .)
    FOR             reduce using rule 5 (instructions -> instruction .)
    BREAK           reduce using rule 5 (instructions -> instruction .)
    CONTINUE        reduce using rule 5 (instructions -> instruction .)
    RETURN          reduce using rule 5 (instructions -> instruction .)
    -               reduce using rule 5 (instructions -> instruction .)
    ID              reduce using rule 5 (instructions -> instruction .)
    INTNUM          reduce using rule 5 (instructions -> instruction .)
    FLOATNUM        reduce using rule 5 (instructions -> instruction .)
    STRING          reduce using rule 5 (instructions -> instruction .)
    (               reduce using rule 5 (instructions -> instruction .)
    [               reduce using rule 5 (instructions -> instruction .)

  ! IF              [ reduce using rule 23 (iteration_instruction -> WHILE ( expr ) { instruction .) ]
  ! {               [ reduce using rule 23 (iteration_instruction -> WHILE ( expr ) { instruction .) ]
  ! PRINT           [ reduce using rule 23 (iteration_instruction -> WHILE ( expr ) { instruction .) ]
  ! WHILE           [ reduce using rule 23 (iteration_instruction -> WHILE ( expr ) { instruction .) ]
  ! FOR             [ reduce using rule 23 (iteration_instruction -> WHILE ( expr ) { instruction .) ]
  ! BREAK           [ reduce using rule 23 (iteration_instruction -> WHILE ( expr ) { instruction .) ]
  ! CONTINUE        [ reduce using rule 23 (iteration_instruction -> WHILE ( expr ) { instruction .) ]
  ! RETURN          [ reduce using rule 23 (iteration_instruction -> WHILE ( expr ) { instruction .) ]
  ! -               [ reduce using rule 23 (iteration_instruction -> WHILE ( expr ) { instruction .) ]
  ! ID              [ reduce using rule 23 (iteration_instruction -> WHILE ( expr ) { instruction .) ]
  ! INTNUM          [ reduce using rule 23 (iteration_instruction -> WHILE ( expr ) { instruction .) ]
  ! FLOATNUM        [ reduce using rule 23 (iteration_instruction -> WHILE ( expr ) { instruction .) ]
  ! STRING          [ reduce using rule 23 (iteration_instruction -> WHILE ( expr ) { instruction .) ]
  ! (               [ reduce using rule 23 (iteration_instruction -> WHILE ( expr ) { instruction .) ]
  ! [               [ reduce using rule 23 (iteration_instruction -> WHILE ( expr ) { instruction .) ]
  ! }               [ reduce using rule 23 (iteration_instruction -> WHILE ( expr ) { instruction .) ]


state 140

    (66) iterator_assignment -> ID = expr : expr .
    (56) expr -> expr . , assignment_expr

    IF              reduce using rule 66 (iterator_assignment -> ID = expr : expr .)
    {               reduce using rule 66 (iterator_assignment -> ID = expr : expr .)
    PRINT           reduce using rule 66 (iterator_assignment -> ID = expr : expr .)
    WHILE           reduce using rule 66 (iterator_assignment -> ID = expr : expr .)
    FOR             reduce using rule 66 (iterator_assignment -> ID = expr : expr .)
    BREAK           reduce using rule 66 (iterator_assignment -> ID = expr : expr .)
    CONTINUE        reduce using rule 66 (iterator_assignment -> ID = expr : expr .)
    RETURN          reduce using rule 66 (iterator_assignment -> ID = expr : expr .)
    -               reduce using rule 66 (iterator_assignment -> ID = expr : expr .)
    ID              reduce using rule 66 (iterator_assignment -> ID = expr : expr .)
    INTNUM          reduce using rule 66 (iterator_assignment -> ID = expr : expr .)
    FLOATNUM        reduce using rule 66 (iterator_assignment -> ID = expr : expr .)
    STRING          reduce using rule 66 (iterator_assignment -> ID = expr : expr .)
    (               reduce using rule 66 (iterator_assignment -> ID = expr : expr .)
    [               reduce using rule 66 (iterator_assignment -> ID = expr : expr .)
    ,               shift and go to state 92


state 141

    (18) conditional_instruction -> IF ( expr ) instruction ELSE . instruction
    (6) instruction -> . assignment_instruction
    (7) instruction -> . conditional_instruction
    (8) instruction -> . compound_instruction
    (9) instruction -> . print_instruction
    (10) instruction -> . iteration_instruction
    (11) instruction -> . jump_instruction
    (12) assignment_instruction -> . unary_expr = expr ;
    (13) assignment_instruction -> . unary_expr ADDASSIGN expr ;
    (14) assignment_instruction -> . unary_expr SUBASSIGN expr ;
    (15) assignment_instruction -> . unary_expr MULASSIGN expr ;
    (16) assignment_instruction -> . unary_expr DIVASSIGN expr ;
    (17) conditional_instruction -> . IF ( expr ) instruction
    (18) conditional_instruction -> . IF ( expr ) instruction ELSE instruction
    (19) compound_instruction -> . { }
    (20) compound_instruction -> . { instructions }
    (21) print_instruction -> . PRINT expr ;
    (22) iteration_instruction -> . WHILE ( expr ) instruction
    (23) iteration_instruction -> . WHILE ( expr ) { instruction
    (24) iteration_instruction -> . FOR iterator_assignment instruction
    (25) jump_instruction -> . BREAK ;
    (26) jump_instruction -> . CONTINUE ;
    (27) jump_instruction -> . RETURN ;
    (37) unary_expr -> . postfix_expr
    (38) unary_expr -> . - multiplicative_expr
    (34) postfix_expr -> . primary_expr
    (35) postfix_expr -> . postfix_expr [ expr ]
    (36) postfix_expr -> . postfix_expr SINGLE_QUOTE
    (28) primary_expr -> . ID
    (29) primary_expr -> . INTNUM
    (30) primary_expr -> . FLOATNUM
    (31) primary_expr -> . STRING
    (32) primary_expr -> . matrix
    (33) primary_expr -> . ( expr )
    (60) matrix -> . [ outer ]

    IF              shift and go to state 23
    {               shift and go to state 29
    PRINT           shift and go to state 6
    WHILE           shift and go to state 5
    FOR             shift and go to state 19
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    RETURN          shift and go to state 1
    -               shift and go to state 14
    ID              shift and go to state 22
    INTNUM          shift and go to state 10
    FLOATNUM        shift and go to state 4
    STRING          shift and go to state 8
    (               shift and go to state 13
    [               shift and go to state 21

    iteration_instruction          shift and go to state 18
    unary_expr                     shift and go to state 2
    compound_instruction           shift and go to state 24
    instruction                    shift and go to state 142
    assignment_instruction         shift and go to state 3
    postfix_expr                   shift and go to state 12
    primary_expr                   shift and go to state 9
    jump_instruction               shift and go to state 16
    print_instruction              shift and go to state 28
    conditional_instruction        shift and go to state 7
    matrix                         shift and go to state 11

state 142

    (18) conditional_instruction -> IF ( expr ) instruction ELSE instruction .

    }               reduce using rule 18 (conditional_instruction -> IF ( expr ) instruction ELSE instruction .)
    IF              reduce using rule 18 (conditional_instruction -> IF ( expr ) instruction ELSE instruction .)
    {               reduce using rule 18 (conditional_instruction -> IF ( expr ) instruction ELSE instruction .)
    PRINT           reduce using rule 18 (conditional_instruction -> IF ( expr ) instruction ELSE instruction .)
    WHILE           reduce using rule 18 (conditional_instruction -> IF ( expr ) instruction ELSE instruction .)
    FOR             reduce using rule 18 (conditional_instruction -> IF ( expr ) instruction ELSE instruction .)
    BREAK           reduce using rule 18 (conditional_instruction -> IF ( expr ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 18 (conditional_instruction -> IF ( expr ) instruction ELSE instruction .)
    RETURN          reduce using rule 18 (conditional_instruction -> IF ( expr ) instruction ELSE instruction .)
    -               reduce using rule 18 (conditional_instruction -> IF ( expr ) instruction ELSE instruction .)
    ID              reduce using rule 18 (conditional_instruction -> IF ( expr ) instruction ELSE instruction .)
    INTNUM          reduce using rule 18 (conditional_instruction -> IF ( expr ) instruction ELSE instruction .)
    FLOATNUM        reduce using rule 18 (conditional_instruction -> IF ( expr ) instruction ELSE instruction .)
    STRING          reduce using rule 18 (conditional_instruction -> IF ( expr ) instruction ELSE instruction .)
    (               reduce using rule 18 (conditional_instruction -> IF ( expr ) instruction ELSE instruction .)
    [               reduce using rule 18 (conditional_instruction -> IF ( expr ) instruction ELSE instruction .)
    $end            reduce using rule 18 (conditional_instruction -> IF ( expr ) instruction ELSE instruction .)
    ELSE            reduce using rule 18 (conditional_instruction -> IF ( expr ) instruction ELSE instruction .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for [ in state 12 resolved as shift
WARNING: shift/reduce conflict for - in state 45 resolved as shift
WARNING: shift/reduce conflict for , in state 57 resolved as shift
WARNING: shift/reduce conflict for - in state 119 resolved as shift
WARNING: reduce/reduce conflict in state 139 resolved using rule (instructions -> instruction)
WARNING: rejected rule (iteration_instruction -> WHILE ( expr ) { instruction) in state 139
